
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000005a4  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800112  00800112  0000064a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000067a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088d  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051b  00000000  00000000  00000fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056d  00000000  00000000  0000150a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  00001a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000388  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b9  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000023c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 ea       	ldi	r30, 0xA4	; 164
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 31       	cpi	r26, 0x12	; 18
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e1       	ldi	r26, 0x12	; 18
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ae 31       	cpi	r26, 0x1E	; 30
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  a6:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_3>:
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	10 92 13 01 	sts	0x0113, r1
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <__vector_19>:


uint8_t RECEIVED = 0;

ISR(USART0_RXC_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
	RECEIVED = 1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 12 01 	sts	0x0112, r24
	
	unsigned char temp = UDR0;
  ee:	8c b1       	in	r24, 0x0c	; 12
	UART_Transmit(temp); // for å teste at det funker
  f0:	0e 94 04 01 	call	0x208	; 0x208 <UART_Transmit>
}
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <main>:


int main(void)
{

	DDRA = 0xFF;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	8a bb       	out	0x1a, r24	; 26
	//unsigned long ubrr = (F_CPU/(16*BAUD))-1;//31;
	UART_Init(UBRR);
 11a:	8f e1       	ldi	r24, 0x1F	; 31
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <UART_Init>
	fdevopen(&UART_Transmit, &UART_Recieve);
 122:	6a e0       	ldi	r22, 0x0A	; 10
 124:	71 e0       	ldi	r23, 0x01	; 1
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0e 94 0e 01 	call	0x21c	; 0x21c <fdevopen>
	printf("Hello world\n");
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 59 01 	call	0x2b2	; 0x2b2 <puts>
	init_SRAM();
 136:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <init_SRAM>
	
	
	OLED_init();
 13a:	0e 94 a2 00 	call	0x144	; 0x144 <OLED_init>
	OLED_clear_display();
 13e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <OLED_clear_display>
 142:	ff cf       	rjmp	.-2      	; 0x142 <main+0x2c>

00000144 <OLED_init>:

void OLED_init ()
{
	volatile char *addresse = ext_oled_cmd;
	
	*addresse = 0xae;        //  display  off *(adresse+0xae)
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f0 e1       	ldi	r31, 0x10	; 16
 148:	8e ea       	ldi	r24, 0xAE	; 174
 14a:	80 83       	st	Z, r24
	*addresse = 0xa1;        //segment  remap
 14c:	81 ea       	ldi	r24, 0xA1	; 161
 14e:	80 83       	st	Z, r24
	//*addresse = 00b;		 // Horizontal addressing??????
	*addresse = 0xda;        //common  pads  hardware:  alternative
 150:	8a ed       	ldi	r24, 0xDA	; 218
 152:	80 83       	st	Z, r24
	*addresse = 0x12;
 154:	82 e1       	ldi	r24, 0x12	; 18
 156:	80 83       	st	Z, r24
	*addresse = 0xc8;        //common
 158:	88 ec       	ldi	r24, 0xC8	; 200
 15a:	80 83       	st	Z, r24
	//output scan direction:com63~com0
	*addresse = 0xa8;        //multiplex  ration  mode:63
 15c:	88 ea       	ldi	r24, 0xA8	; 168
 15e:	80 83       	st	Z, r24
	*addresse = 0x3f;
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	80 83       	st	Z, r24
	*addresse = 0xd5;        //display
 164:	85 ed       	ldi	r24, 0xD5	; 213
 166:	80 83       	st	Z, r24
	//divide ratio/osc. freq. mode
	*addresse = 0x80;
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	80 83       	st	Z, r24
	*addresse = 0x81;        //contrast  control
 16c:	81 e8       	ldi	r24, 0x81	; 129
 16e:	80 83       	st	Z, r24
	*addresse = 0x50;
 170:	80 e5       	ldi	r24, 0x50	; 80
 172:	80 83       	st	Z, r24
	*addresse = 0xd9;        //set  pre-charge  period
 174:	89 ed       	ldi	r24, 0xD9	; 217
 176:	80 83       	st	Z, r24
	*addresse = 0x21;
 178:	81 e2       	ldi	r24, 0x21	; 33
 17a:	80 83       	st	Z, r24
	*addresse = 0x20;        //Set  Memory  Addressing  Mode
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	80 83       	st	Z, r24
	*addresse = 0x02;
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	80 83       	st	Z, r24
	*addresse = 0xdb;        //VCOM  deselect  level  mode
 184:	8b ed       	ldi	r24, 0xDB	; 219
 186:	80 83       	st	Z, r24
	*addresse = 0x30;
 188:	80 e3       	ldi	r24, 0x30	; 48
 18a:	80 83       	st	Z, r24
	*addresse = 0xad;        //master  configuration
 18c:	8d ea       	ldi	r24, 0xAD	; 173
 18e:	80 83       	st	Z, r24
	*addresse = 0x00;
 190:	10 82       	st	Z, r1
	*addresse = 0xa4;        //out  follows  RAM  content
 192:	84 ea       	ldi	r24, 0xA4	; 164
 194:	80 83       	st	Z, r24
	*addresse = 0xa6;        //set  normal  display
 196:	86 ea       	ldi	r24, 0xA6	; 166
 198:	80 83       	st	Z, r24
	*addresse = 0xaf;        //  display  on
 19a:	8f ea       	ldi	r24, 0xAF	; 175
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <OLED_clear_display>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	2f e9       	ldi	r18, 0x9F	; 159
 1a2:	86 e8       	ldi	r24, 0x86	; 134
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <OLED_clear_display+0x6>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <OLED_clear_display+0x10>
 1b0:	00 00       	nop

void OLED_clear_display(void){
	
 	_delay_ms(500);
	 
	 uint8_t c = 0xb0;
 1b2:	80 eb       	ldi	r24, 0xB0	; 176
	while(1){
 		*ext_oled_cmd = c++;
 1b4:	a0 e0       	ldi	r26, 0x00	; 0
 1b6:	b0 e1       	ldi	r27, 0x10	; 16
 		*ext_oled_cmd = 0x10;
 1b8:	20 e1       	ldi	r18, 0x10	; 16
		*ext_oled_cmd = 0x00;
	
	

		for (uint8_t i = 0; i<128; i++) {
			*ext_oled_data = 0x00;
 1ba:	e0 e0       	ldi	r30, 0x00	; 0
 1bc:	f2 e1       	ldi	r31, 0x12	; 18
	
 	_delay_ms(500);
	 
	 uint8_t c = 0xb0;
	while(1){
 		*ext_oled_cmd = c++;
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	98 0f       	add	r25, r24
 1c2:	8c 93       	st	X, r24
 		*ext_oled_cmd = 0x10;
 1c4:	2c 93       	st	X, r18
		*ext_oled_cmd = 0x00;
 1c6:	1c 92       	st	X, r1
	
	

		for (uint8_t i = 0; i<128; i++) {
 1c8:	80 e0       	ldi	r24, 0x00	; 0
			*ext_oled_data = 0x00;
 1ca:	10 82       	st	Z, r1
 1cc:	c3 ec       	ldi	r28, 0xC3	; 195
 1ce:	d9 e0       	ldi	r29, 0x09	; 9
 1d0:	21 97       	sbiw	r28, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <OLED_clear_display+0x30>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <OLED_clear_display+0x36>
 1d6:	00 00       	nop
 		*ext_oled_cmd = 0x10;
		*ext_oled_cmd = 0x00;
	
	

		for (uint8_t i = 0; i<128; i++) {
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 38       	cpi	r24, 0x80	; 128
 1dc:	b1 f7       	brne	.-20     	; 0x1ca <OLED_clear_display+0x2a>
	
 	_delay_ms(500);
	 
	 uint8_t c = 0xb0;
	while(1){
 		*ext_oled_cmd = c++;
 1de:	89 2f       	mov	r24, r25
 1e0:	ee cf       	rjmp	.-36     	; 0x1be <OLED_clear_display+0x1e>

000001e2 <init_SRAM>:
 1e2:	85 b7       	in	r24, 0x35	; 53
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	85 bf       	out	0x35, r24	; 53
 1e8:	80 b7       	in	r24, 0x30	; 48
 1ea:	80 62       	ori	r24, 0x20	; 32
 1ec:	80 bf       	out	0x30, r24	; 48
 1ee:	08 95       	ret

000001f0 <UART_Init>:
 1f0:	90 bd       	out	0x20, r25	; 32
 1f2:	89 b9       	out	0x09, r24	; 9
 1f4:	88 e1       	ldi	r24, 0x18	; 24
 1f6:	8a b9       	out	0x0a, r24	; 10
 1f8:	59 98       	cbi	0x0b, 1	; 11
 1fa:	f8 94       	cli
 1fc:	57 9a       	sbi	0x0a, 7	; 10
 1fe:	5f 9a       	sbi	0x0b, 7	; 11
 200:	78 94       	sei
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	08 95       	ret

00000208 <UART_Transmit>:
 208:	5d 9b       	sbis	0x0b, 5	; 11
 20a:	fe cf       	rjmp	.-4      	; 0x208 <UART_Transmit>
 20c:	8c b9       	out	0x0c, r24	; 12
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	08 95       	ret

00000214 <UART_Recieve>:
 214:	5f 9b       	sbis	0x0b, 7	; 11
 216:	fe cf       	rjmp	.-4      	; 0x214 <UART_Recieve>
 218:	8c b1       	in	r24, 0x0c	; 12
 21a:	08 95       	ret

0000021c <fdevopen>:
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
 226:	8b 01       	movw	r16, r22
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	31 f4       	brne	.+12     	; 0x238 <fdevopen+0x1c>
 22c:	61 15       	cp	r22, r1
 22e:	71 05       	cpc	r23, r1
 230:	19 f4       	brne	.+6      	; 0x238 <fdevopen+0x1c>
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	38 c0       	rjmp	.+112    	; 0x2a8 <fdevopen+0x8c>
 238:	6e e0       	ldi	r22, 0x0E	; 14
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 86 01 	call	0x30c	; 0x30c <calloc>
 244:	fc 01       	movw	r30, r24
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	a1 f3       	breq	.-24     	; 0x232 <fdevopen+0x16>
 24a:	80 e8       	ldi	r24, 0x80	; 128
 24c:	83 83       	std	Z+3, r24	; 0x03
 24e:	01 15       	cp	r16, r1
 250:	11 05       	cpc	r17, r1
 252:	71 f0       	breq	.+28     	; 0x270 <fdevopen+0x54>
 254:	13 87       	std	Z+11, r17	; 0x0b
 256:	02 87       	std	Z+10, r16	; 0x0a
 258:	81 e8       	ldi	r24, 0x81	; 129
 25a:	83 83       	std	Z+3, r24	; 0x03
 25c:	80 91 14 01 	lds	r24, 0x0114
 260:	90 91 15 01 	lds	r25, 0x0115
 264:	89 2b       	or	r24, r25
 266:	21 f4       	brne	.+8      	; 0x270 <fdevopen+0x54>
 268:	f0 93 15 01 	sts	0x0115, r31
 26c:	e0 93 14 01 	sts	0x0114, r30
 270:	20 97       	sbiw	r28, 0x00	; 0
 272:	c9 f0       	breq	.+50     	; 0x2a6 <fdevopen+0x8a>
 274:	d1 87       	std	Z+9, r29	; 0x09
 276:	c0 87       	std	Z+8, r28	; 0x08
 278:	83 81       	ldd	r24, Z+3	; 0x03
 27a:	82 60       	ori	r24, 0x02	; 2
 27c:	83 83       	std	Z+3, r24	; 0x03
 27e:	80 91 16 01 	lds	r24, 0x0116
 282:	90 91 17 01 	lds	r25, 0x0117
 286:	89 2b       	or	r24, r25
 288:	71 f4       	brne	.+28     	; 0x2a6 <fdevopen+0x8a>
 28a:	f0 93 17 01 	sts	0x0117, r31
 28e:	e0 93 16 01 	sts	0x0116, r30
 292:	80 91 18 01 	lds	r24, 0x0118
 296:	90 91 19 01 	lds	r25, 0x0119
 29a:	89 2b       	or	r24, r25
 29c:	21 f4       	brne	.+8      	; 0x2a6 <fdevopen+0x8a>
 29e:	f0 93 19 01 	sts	0x0119, r31
 2a2:	e0 93 18 01 	sts	0x0118, r30
 2a6:	cf 01       	movw	r24, r30
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	08 95       	ret

000002b2 <puts>:
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	e0 91 16 01 	lds	r30, 0x0116
 2be:	f0 91 17 01 	lds	r31, 0x0117
 2c2:	23 81       	ldd	r18, Z+3	; 0x03
 2c4:	21 ff       	sbrs	r18, 1
 2c6:	1b c0       	rjmp	.+54     	; 0x2fe <puts+0x4c>
 2c8:	ec 01       	movw	r28, r24
 2ca:	00 e0       	ldi	r16, 0x00	; 0
 2cc:	10 e0       	ldi	r17, 0x00	; 0
 2ce:	89 91       	ld	r24, Y+
 2d0:	60 91 16 01 	lds	r22, 0x0116
 2d4:	70 91 17 01 	lds	r23, 0x0117
 2d8:	db 01       	movw	r26, r22
 2da:	18 96       	adiw	r26, 0x08	; 8
 2dc:	ed 91       	ld	r30, X+
 2de:	fc 91       	ld	r31, X
 2e0:	19 97       	sbiw	r26, 0x09	; 9
 2e2:	88 23       	and	r24, r24
 2e4:	31 f0       	breq	.+12     	; 0x2f2 <puts+0x40>
 2e6:	09 95       	icall
 2e8:	89 2b       	or	r24, r25
 2ea:	89 f3       	breq	.-30     	; 0x2ce <puts+0x1c>
 2ec:	0f ef       	ldi	r16, 0xFF	; 255
 2ee:	1f ef       	ldi	r17, 0xFF	; 255
 2f0:	ee cf       	rjmp	.-36     	; 0x2ce <puts+0x1c>
 2f2:	8a e0       	ldi	r24, 0x0A	; 10
 2f4:	09 95       	icall
 2f6:	89 2b       	or	r24, r25
 2f8:	11 f4       	brne	.+4      	; 0x2fe <puts+0x4c>
 2fa:	c8 01       	movw	r24, r16
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <puts+0x50>
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	9f ef       	ldi	r25, 0xFF	; 255
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	08 95       	ret

0000030c <calloc>:
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	86 9f       	mul	r24, r22
 316:	80 01       	movw	r16, r0
 318:	87 9f       	mul	r24, r23
 31a:	10 0d       	add	r17, r0
 31c:	96 9f       	mul	r25, r22
 31e:	10 0d       	add	r17, r0
 320:	11 24       	eor	r1, r1
 322:	c8 01       	movw	r24, r16
 324:	0e 94 a2 01 	call	0x344	; 0x344 <malloc>
 328:	ec 01       	movw	r28, r24
 32a:	00 97       	sbiw	r24, 0x00	; 0
 32c:	29 f0       	breq	.+10     	; 0x338 <calloc+0x2c>
 32e:	a8 01       	movw	r20, r16
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	0e 94 c9 02 	call	0x592	; 0x592 <memset>
 338:	ce 01       	movw	r24, r28
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	08 95       	ret

00000344 <malloc>:
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	91 05       	cpc	r25, r1
 34c:	10 f4       	brcc	.+4      	; 0x352 <malloc+0xe>
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	e0 91 1c 01 	lds	r30, 0x011C
 356:	f0 91 1d 01 	lds	r31, 0x011D
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	a0 e0       	ldi	r26, 0x00	; 0
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	30 97       	sbiw	r30, 0x00	; 0
 364:	39 f1       	breq	.+78     	; 0x3b4 <malloc+0x70>
 366:	40 81       	ld	r20, Z
 368:	51 81       	ldd	r21, Z+1	; 0x01
 36a:	48 17       	cp	r20, r24
 36c:	59 07       	cpc	r21, r25
 36e:	b8 f0       	brcs	.+46     	; 0x39e <malloc+0x5a>
 370:	48 17       	cp	r20, r24
 372:	59 07       	cpc	r21, r25
 374:	71 f4       	brne	.+28     	; 0x392 <malloc+0x4e>
 376:	82 81       	ldd	r24, Z+2	; 0x02
 378:	93 81       	ldd	r25, Z+3	; 0x03
 37a:	10 97       	sbiw	r26, 0x00	; 0
 37c:	29 f0       	breq	.+10     	; 0x388 <malloc+0x44>
 37e:	13 96       	adiw	r26, 0x03	; 3
 380:	9c 93       	st	X, r25
 382:	8e 93       	st	-X, r24
 384:	12 97       	sbiw	r26, 0x02	; 2
 386:	2c c0       	rjmp	.+88     	; 0x3e0 <malloc+0x9c>
 388:	90 93 1d 01 	sts	0x011D, r25
 38c:	80 93 1c 01 	sts	0x011C, r24
 390:	27 c0       	rjmp	.+78     	; 0x3e0 <malloc+0x9c>
 392:	21 15       	cp	r18, r1
 394:	31 05       	cpc	r19, r1
 396:	31 f0       	breq	.+12     	; 0x3a4 <malloc+0x60>
 398:	42 17       	cp	r20, r18
 39a:	53 07       	cpc	r21, r19
 39c:	18 f0       	brcs	.+6      	; 0x3a4 <malloc+0x60>
 39e:	a9 01       	movw	r20, r18
 3a0:	db 01       	movw	r26, r22
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <malloc+0x62>
 3a4:	ef 01       	movw	r28, r30
 3a6:	9a 01       	movw	r18, r20
 3a8:	bd 01       	movw	r22, r26
 3aa:	df 01       	movw	r26, r30
 3ac:	02 80       	ldd	r0, Z+2	; 0x02
 3ae:	f3 81       	ldd	r31, Z+3	; 0x03
 3b0:	e0 2d       	mov	r30, r0
 3b2:	d7 cf       	rjmp	.-82     	; 0x362 <malloc+0x1e>
 3b4:	21 15       	cp	r18, r1
 3b6:	31 05       	cpc	r19, r1
 3b8:	f9 f0       	breq	.+62     	; 0x3f8 <malloc+0xb4>
 3ba:	28 1b       	sub	r18, r24
 3bc:	39 0b       	sbc	r19, r25
 3be:	24 30       	cpi	r18, 0x04	; 4
 3c0:	31 05       	cpc	r19, r1
 3c2:	80 f4       	brcc	.+32     	; 0x3e4 <malloc+0xa0>
 3c4:	8a 81       	ldd	r24, Y+2	; 0x02
 3c6:	9b 81       	ldd	r25, Y+3	; 0x03
 3c8:	61 15       	cp	r22, r1
 3ca:	71 05       	cpc	r23, r1
 3cc:	21 f0       	breq	.+8      	; 0x3d6 <malloc+0x92>
 3ce:	fb 01       	movw	r30, r22
 3d0:	93 83       	std	Z+3, r25	; 0x03
 3d2:	82 83       	std	Z+2, r24	; 0x02
 3d4:	04 c0       	rjmp	.+8      	; 0x3de <malloc+0x9a>
 3d6:	90 93 1d 01 	sts	0x011D, r25
 3da:	80 93 1c 01 	sts	0x011C, r24
 3de:	fe 01       	movw	r30, r28
 3e0:	32 96       	adiw	r30, 0x02	; 2
 3e2:	44 c0       	rjmp	.+136    	; 0x46c <malloc+0x128>
 3e4:	fe 01       	movw	r30, r28
 3e6:	e2 0f       	add	r30, r18
 3e8:	f3 1f       	adc	r31, r19
 3ea:	81 93       	st	Z+, r24
 3ec:	91 93       	st	Z+, r25
 3ee:	22 50       	subi	r18, 0x02	; 2
 3f0:	31 09       	sbc	r19, r1
 3f2:	39 83       	std	Y+1, r19	; 0x01
 3f4:	28 83       	st	Y, r18
 3f6:	3a c0       	rjmp	.+116    	; 0x46c <malloc+0x128>
 3f8:	20 91 1a 01 	lds	r18, 0x011A
 3fc:	30 91 1b 01 	lds	r19, 0x011B
 400:	23 2b       	or	r18, r19
 402:	41 f4       	brne	.+16     	; 0x414 <malloc+0xd0>
 404:	20 91 02 01 	lds	r18, 0x0102
 408:	30 91 03 01 	lds	r19, 0x0103
 40c:	30 93 1b 01 	sts	0x011B, r19
 410:	20 93 1a 01 	sts	0x011A, r18
 414:	20 91 00 01 	lds	r18, 0x0100
 418:	30 91 01 01 	lds	r19, 0x0101
 41c:	21 15       	cp	r18, r1
 41e:	31 05       	cpc	r19, r1
 420:	41 f4       	brne	.+16     	; 0x432 <malloc+0xee>
 422:	2d b7       	in	r18, 0x3d	; 61
 424:	3e b7       	in	r19, 0x3e	; 62
 426:	40 91 04 01 	lds	r20, 0x0104
 42a:	50 91 05 01 	lds	r21, 0x0105
 42e:	24 1b       	sub	r18, r20
 430:	35 0b       	sbc	r19, r21
 432:	e0 91 1a 01 	lds	r30, 0x011A
 436:	f0 91 1b 01 	lds	r31, 0x011B
 43a:	e2 17       	cp	r30, r18
 43c:	f3 07       	cpc	r31, r19
 43e:	a0 f4       	brcc	.+40     	; 0x468 <malloc+0x124>
 440:	2e 1b       	sub	r18, r30
 442:	3f 0b       	sbc	r19, r31
 444:	28 17       	cp	r18, r24
 446:	39 07       	cpc	r19, r25
 448:	78 f0       	brcs	.+30     	; 0x468 <malloc+0x124>
 44a:	ac 01       	movw	r20, r24
 44c:	4e 5f       	subi	r20, 0xFE	; 254
 44e:	5f 4f       	sbci	r21, 0xFF	; 255
 450:	24 17       	cp	r18, r20
 452:	35 07       	cpc	r19, r21
 454:	48 f0       	brcs	.+18     	; 0x468 <malloc+0x124>
 456:	4e 0f       	add	r20, r30
 458:	5f 1f       	adc	r21, r31
 45a:	50 93 1b 01 	sts	0x011B, r21
 45e:	40 93 1a 01 	sts	0x011A, r20
 462:	81 93       	st	Z+, r24
 464:	91 93       	st	Z+, r25
 466:	02 c0       	rjmp	.+4      	; 0x46c <malloc+0x128>
 468:	e0 e0       	ldi	r30, 0x00	; 0
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	cf 01       	movw	r24, r30
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <free>:
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	00 97       	sbiw	r24, 0x00	; 0
 47a:	09 f4       	brne	.+2      	; 0x47e <free+0xa>
 47c:	87 c0       	rjmp	.+270    	; 0x58c <__stack+0x8d>
 47e:	fc 01       	movw	r30, r24
 480:	32 97       	sbiw	r30, 0x02	; 2
 482:	13 82       	std	Z+3, r1	; 0x03
 484:	12 82       	std	Z+2, r1	; 0x02
 486:	c0 91 1c 01 	lds	r28, 0x011C
 48a:	d0 91 1d 01 	lds	r29, 0x011D
 48e:	20 97       	sbiw	r28, 0x00	; 0
 490:	81 f4       	brne	.+32     	; 0x4b2 <free+0x3e>
 492:	20 81       	ld	r18, Z
 494:	31 81       	ldd	r19, Z+1	; 0x01
 496:	28 0f       	add	r18, r24
 498:	39 1f       	adc	r19, r25
 49a:	80 91 1a 01 	lds	r24, 0x011A
 49e:	90 91 1b 01 	lds	r25, 0x011B
 4a2:	82 17       	cp	r24, r18
 4a4:	93 07       	cpc	r25, r19
 4a6:	79 f5       	brne	.+94     	; 0x506 <__stack+0x7>
 4a8:	f0 93 1b 01 	sts	0x011B, r31
 4ac:	e0 93 1a 01 	sts	0x011A, r30
 4b0:	6d c0       	rjmp	.+218    	; 0x58c <__stack+0x8d>
 4b2:	de 01       	movw	r26, r28
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	ae 17       	cp	r26, r30
 4ba:	bf 07       	cpc	r27, r31
 4bc:	50 f4       	brcc	.+20     	; 0x4d2 <free+0x5e>
 4be:	12 96       	adiw	r26, 0x02	; 2
 4c0:	4d 91       	ld	r20, X+
 4c2:	5c 91       	ld	r21, X
 4c4:	13 97       	sbiw	r26, 0x03	; 3
 4c6:	9d 01       	movw	r18, r26
 4c8:	41 15       	cp	r20, r1
 4ca:	51 05       	cpc	r21, r1
 4cc:	09 f1       	breq	.+66     	; 0x510 <__stack+0x11>
 4ce:	da 01       	movw	r26, r20
 4d0:	f3 cf       	rjmp	.-26     	; 0x4b8 <free+0x44>
 4d2:	b3 83       	std	Z+3, r27	; 0x03
 4d4:	a2 83       	std	Z+2, r26	; 0x02
 4d6:	40 81       	ld	r20, Z
 4d8:	51 81       	ldd	r21, Z+1	; 0x01
 4da:	84 0f       	add	r24, r20
 4dc:	95 1f       	adc	r25, r21
 4de:	8a 17       	cp	r24, r26
 4e0:	9b 07       	cpc	r25, r27
 4e2:	71 f4       	brne	.+28     	; 0x500 <__stack+0x1>
 4e4:	8d 91       	ld	r24, X+
 4e6:	9c 91       	ld	r25, X
 4e8:	11 97       	sbiw	r26, 0x01	; 1
 4ea:	84 0f       	add	r24, r20
 4ec:	95 1f       	adc	r25, r21
 4ee:	02 96       	adiw	r24, 0x02	; 2
 4f0:	91 83       	std	Z+1, r25	; 0x01
 4f2:	80 83       	st	Z, r24
 4f4:	12 96       	adiw	r26, 0x02	; 2
 4f6:	8d 91       	ld	r24, X+
 4f8:	9c 91       	ld	r25, X
 4fa:	13 97       	sbiw	r26, 0x03	; 3
 4fc:	93 83       	std	Z+3, r25	; 0x03
 4fe:	82 83       	std	Z+2, r24	; 0x02
 500:	21 15       	cp	r18, r1
 502:	31 05       	cpc	r19, r1
 504:	29 f4       	brne	.+10     	; 0x510 <__stack+0x11>
 506:	f0 93 1d 01 	sts	0x011D, r31
 50a:	e0 93 1c 01 	sts	0x011C, r30
 50e:	3e c0       	rjmp	.+124    	; 0x58c <__stack+0x8d>
 510:	d9 01       	movw	r26, r18
 512:	13 96       	adiw	r26, 0x03	; 3
 514:	fc 93       	st	X, r31
 516:	ee 93       	st	-X, r30
 518:	12 97       	sbiw	r26, 0x02	; 2
 51a:	4d 91       	ld	r20, X+
 51c:	5d 91       	ld	r21, X+
 51e:	a4 0f       	add	r26, r20
 520:	b5 1f       	adc	r27, r21
 522:	ea 17       	cp	r30, r26
 524:	fb 07       	cpc	r31, r27
 526:	79 f4       	brne	.+30     	; 0x546 <__stack+0x47>
 528:	80 81       	ld	r24, Z
 52a:	91 81       	ldd	r25, Z+1	; 0x01
 52c:	84 0f       	add	r24, r20
 52e:	95 1f       	adc	r25, r21
 530:	02 96       	adiw	r24, 0x02	; 2
 532:	d9 01       	movw	r26, r18
 534:	11 96       	adiw	r26, 0x01	; 1
 536:	9c 93       	st	X, r25
 538:	8e 93       	st	-X, r24
 53a:	82 81       	ldd	r24, Z+2	; 0x02
 53c:	93 81       	ldd	r25, Z+3	; 0x03
 53e:	13 96       	adiw	r26, 0x03	; 3
 540:	9c 93       	st	X, r25
 542:	8e 93       	st	-X, r24
 544:	12 97       	sbiw	r26, 0x02	; 2
 546:	e0 e0       	ldi	r30, 0x00	; 0
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	9b 81       	ldd	r25, Y+3	; 0x03
 54e:	00 97       	sbiw	r24, 0x00	; 0
 550:	19 f0       	breq	.+6      	; 0x558 <__stack+0x59>
 552:	fe 01       	movw	r30, r28
 554:	ec 01       	movw	r28, r24
 556:	f9 cf       	rjmp	.-14     	; 0x54a <__stack+0x4b>
 558:	ce 01       	movw	r24, r28
 55a:	02 96       	adiw	r24, 0x02	; 2
 55c:	28 81       	ld	r18, Y
 55e:	39 81       	ldd	r19, Y+1	; 0x01
 560:	82 0f       	add	r24, r18
 562:	93 1f       	adc	r25, r19
 564:	20 91 1a 01 	lds	r18, 0x011A
 568:	30 91 1b 01 	lds	r19, 0x011B
 56c:	28 17       	cp	r18, r24
 56e:	39 07       	cpc	r19, r25
 570:	69 f4       	brne	.+26     	; 0x58c <__stack+0x8d>
 572:	30 97       	sbiw	r30, 0x00	; 0
 574:	29 f4       	brne	.+10     	; 0x580 <__stack+0x81>
 576:	10 92 1d 01 	sts	0x011D, r1
 57a:	10 92 1c 01 	sts	0x011C, r1
 57e:	02 c0       	rjmp	.+4      	; 0x584 <__stack+0x85>
 580:	13 82       	std	Z+3, r1	; 0x03
 582:	12 82       	std	Z+2, r1	; 0x02
 584:	d0 93 1b 01 	sts	0x011B, r29
 588:	c0 93 1a 01 	sts	0x011A, r28
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <memset>:
 592:	dc 01       	movw	r26, r24
 594:	01 c0       	rjmp	.+2      	; 0x598 <memset+0x6>
 596:	6d 93       	st	X+, r22
 598:	41 50       	subi	r20, 0x01	; 1
 59a:	50 40       	sbci	r21, 0x00	; 0
 59c:	e0 f7       	brcc	.-8      	; 0x596 <memset+0x4>
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
