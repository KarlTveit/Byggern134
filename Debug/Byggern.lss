
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00000d24  00000db8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008001fe  008001fe  00000eb6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b4  00000000  00000000  00000f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000350  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000371  00000000  00000000  00001896  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000263  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e5  00000000  00000000  00001fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e2       	ldi	r30, 0x24	; 36
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 3f       	cpi	r26, 0xFE	; 254
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ae ef       	ldi	r26, 0xFE	; 254
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a9 30       	cpi	r26, 0x09	; 9
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  a6:	0c 94 90 06 	jmp	0xd20	; 0xd20 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_19>:


uint8_t RECEIVED = 0;

ISR(USART0_RXC_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
	RECEIVED = 1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 fe 01 	sts	0x01FE, r24
	
	unsigned char temp = UDR0;
  d6:	8c b1       	in	r24, 0x0c	; 12
	UART_Transmit(temp); // for å teste at det funker
  d8:	0e 94 40 01 	call	0x280	; 0x280 <UART_Transmit>
}
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	bf 91       	pop	r27
  e2:	af 91       	pop	r26
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	7f 91       	pop	r23
  ea:	6f 91       	pop	r22
  ec:	5f 91       	pop	r21
  ee:	4f 91       	pop	r20
  f0:	3f 91       	pop	r19
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <main>:


int main(void)
{

	DDRA = 0xFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	8a bb       	out	0x1a, r24	; 26
	//unsigned long ubrr = (F_CPU/(16*BAUD))-1;//31;
	UART_Init(UBRR);
 102:	8f e1       	ldi	r24, 0x1F	; 31
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 34 01 	call	0x268	; 0x268 <UART_Init>
	fdevopen(&UART_Transmit, &UART_Recieve);
 10a:	66 e4       	ldi	r22, 0x46	; 70
 10c:	71 e0       	ldi	r23, 0x01	; 1
 10e:	80 e4       	ldi	r24, 0x40	; 64
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 a8 01 	call	0x350	; 0x350 <fdevopen>
	printf("Hello world\n");
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 07 02 	call	0x40e	; 0x40e <puts>
	init_SRAM();
 11e:	0e 94 a8 00 	call	0x150	; 0x150 <init_SRAM>
	SRAM_test();
 122:	0e 94 af 00 	call	0x15e	; 0x15e <SRAM_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	8f e7       	ldi	r24, 0x7F	; 127
 12a:	97 e0       	ldi	r25, 0x07	; 7
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x2e>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x38>
 136:	00 00       	nop
    while(1)
    {
		_delay_ms(500);
			//PORTA = 0xFF;
			PORTA &= ~(1 << 1);
 138:	d9 98       	cbi	0x1b, 1	; 27
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	8f e7       	ldi	r24, 0x7F	; 127
 13e:	97 e0       	ldi	r25, 0x07	; 7
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x42>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x4c>
 14a:	00 00       	nop
		
		_delay_ms(500);
		
			PORTA |= (1 << 1);
 14c:	d9 9a       	sbi	0x1b, 1	; 27
 14e:	eb cf       	rjmp	.-42     	; 0x126 <main+0x28>

00000150 <init_SRAM>:
#include <stdlib.h>
#include <avr/io.h>

void init_SRAM(void){
	// enable external reset, s. --- i datablad atmega162
	MCUCR |= (1 << SRE);
 150:	85 b7       	in	r24, 0x35	; 53
 152:	80 68       	ori	r24, 0x80	; 128
 154:	85 bf       	out	0x35, r24	; 53
	// mask pins, s. 32 i datablad atmega162
	SFIOR |= (1 << XMM2);
 156:	80 b7       	in	r24, 0x30	; 48
 158:	80 62       	ori	r24, 0x20	; 32
 15a:	80 bf       	out	0x30, r24	; 48
 15c:	08 95       	ret

0000015e <SRAM_test>:
}

void SRAM_test(void)
{
 15e:	cf 92       	push	r12
 160:	df 92       	push	r13
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
 16e:	86 e1       	ldi	r24, 0x16	; 22
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 07 02 	call	0x40e	; 0x40e <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
 176:	0e 94 98 01 	call	0x330	; 0x330 <rand>
 17a:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
 17c:	0e 94 9d 01 	call	0x33a	; 0x33a <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 180:	c0 e0       	ldi	r28, 0x00	; 0
 182:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
 184:	00 e0       	ldi	r16, 0x00	; 0
 186:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,
 188:	0f 2e       	mov	r0, r31
 18a:	fc e2       	ldi	r31, 0x2C	; 44
 18c:	ef 2e       	mov	r14, r31
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	ff 2e       	mov	r15, r31
 192:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
 194:	0e 94 98 01 	call	0x330	; 0x330 <rand>
 198:	fe 01       	movw	r30, r28
 19a:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
 19c:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
 19e:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 1a0:	28 17       	cp	r18, r24
 1a2:	a9 f0       	breq	.+42     	; 0x1ce <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,
 1a4:	99 27       	eor	r25, r25
 1a6:	9f 93       	push	r25
 1a8:	8f 93       	push	r24
 1aa:	1f 92       	push	r1
 1ac:	2f 93       	push	r18
 1ae:	df 93       	push	r29
 1b0:	cf 93       	push	r28
 1b2:	ff 92       	push	r15
 1b4:	ef 92       	push	r14
 1b6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <printf>
			retreived_value, some_value);
			write_errors++;
 1ba:	0f 5f       	subi	r16, 0xFF	; 255
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
 1be:	8d b7       	in	r24, 0x3d	; 61
 1c0:	9e b7       	in	r25, 0x3e	; 62
 1c2:	08 96       	adiw	r24, 0x08	; 8
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	9e bf       	out	0x3e, r25	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	c1 15       	cp	r28, r1
 1d2:	98 e0       	ldi	r25, 0x08	; 8
 1d4:	d9 07       	cpc	r29, r25
 1d6:	f1 f6       	brne	.-68     	; 0x194 <SRAM_test+0x36>
			retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
 1d8:	c6 01       	movw	r24, r12
 1da:	0e 94 9d 01 	call	0x33a	; 0x33a <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1de:	c0 e0       	ldi	r28, 0x00	; 0
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 1e2:	e1 2c       	mov	r14, r1
 1e4:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",	i, retreived_value, some_value);
 1e6:	0f 2e       	mov	r0, r31
 1e8:	f5 e6       	ldi	r31, 0x65	; 101
 1ea:	cf 2e       	mov	r12, r31
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	df 2e       	mov	r13, r31
 1f0:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
 1f2:	0e 94 98 01 	call	0x330	; 0x330 <rand>
 1f6:	fe 01       	movw	r30, r28
 1f8:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
 1fa:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 1fc:	28 17       	cp	r18, r24
 1fe:	b1 f0       	breq	.+44     	; 0x22c <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",	i, retreived_value, some_value);
 200:	99 27       	eor	r25, r25
 202:	9f 93       	push	r25
 204:	8f 93       	push	r24
 206:	1f 92       	push	r1
 208:	2f 93       	push	r18
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	df 92       	push	r13
 210:	cf 92       	push	r12
 212:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <printf>
			retrieval_errors++;
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	e8 1a       	sub	r14, r24
 21a:	f8 0a       	sbc	r15, r24
 21c:	8d b7       	in	r24, 0x3d	; 61
 21e:	9e b7       	in	r25, 0x3e	; 62
 220:	08 96       	adiw	r24, 0x08	; 8
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	9e bf       	out	0x3e, r25	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	c1 15       	cp	r28, r1
 230:	98 e0       	ldi	r25, 0x08	; 8
 232:	d9 07       	cpc	r29, r25
 234:	f1 f6       	brne	.-68     	; 0x1f2 <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",	i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase \n	\n", write_errors, retrieval_errors);
 236:	ff 92       	push	r15
 238:	ef 92       	push	r14
 23a:	1f 93       	push	r17
 23c:	0f 93       	push	r16
 23e:	82 ea       	ldi	r24, 0xA2	; 162
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	9f 93       	push	r25
 244:	8f 93       	push	r24
 246:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <printf>
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	df 90       	pop	r13
 264:	cf 90       	pop	r12
 266:	08 95       	ret

00000268 <UART_Init>:
#include "UART.h"

int UART_Init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 268:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 26a:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 26c:	88 e1       	ldi	r24, 0x18	; 24
 26e:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0A &= ~(_BV(U2X0));
 270:	59 98       	cbi	0x0b, 1	; 11
	
	
	cli();
 272:	f8 94       	cli

	
	//RX Complete Interrupt Enable
	UCSR0B |= (1 << RXCIE0);
 274:	57 9a       	sbi	0x0a, 7	; 10
	
	//Receive Complete Flag Enable
	UCSR0A |= (1 << RXC0);
 276:	5f 9a       	sbi	0x0b, 7	; 11
	
	//Global Interrupt Flag Enable
	sei();
 278:	78 94       	sei


	return 1;
}
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	08 95       	ret

00000280 <UART_Transmit>:


int UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1<<UDRE0) )){}
 280:	5d 9b       	sbis	0x0b, 5	; 11
 282:	fe cf       	rjmp	.-4      	; 0x280 <UART_Transmit>
	
	UDR0 = data;
 284:	8c b9       	out	0x0c, r24	; 12
	return 3;
};
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	08 95       	ret

0000028c <UART_Recieve>:


unsigned char UART_Recieve(void) {
	

	while ( !(UCSR0A & (1<<RXC0)));
 28c:	5f 9b       	sbis	0x0b, 7	; 11
 28e:	fe cf       	rjmp	.-4      	; 0x28c <UART_Recieve>
	
	return UDR0;
 290:	8c b1       	in	r24, 0x0c	; 12
	
 292:	08 95       	ret

00000294 <do_rand>:
 294:	8f 92       	push	r8
 296:	9f 92       	push	r9
 298:	af 92       	push	r10
 29a:	bf 92       	push	r11
 29c:	cf 92       	push	r12
 29e:	df 92       	push	r13
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
 2aa:	68 81       	ld	r22, Y
 2ac:	79 81       	ldd	r23, Y+1	; 0x01
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	9b 81       	ldd	r25, Y+3	; 0x03
 2b2:	61 15       	cp	r22, r1
 2b4:	71 05       	cpc	r23, r1
 2b6:	81 05       	cpc	r24, r1
 2b8:	91 05       	cpc	r25, r1
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <do_rand+0x30>
 2bc:	64 e2       	ldi	r22, 0x24	; 36
 2be:	79 ed       	ldi	r23, 0xD9	; 217
 2c0:	8b e5       	ldi	r24, 0x5B	; 91
 2c2:	97 e0       	ldi	r25, 0x07	; 7
 2c4:	2d e1       	ldi	r18, 0x1D	; 29
 2c6:	33 ef       	ldi	r19, 0xF3	; 243
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	0e 94 f6 05 	call	0xbec	; 0xbec <__divmodsi4>
 2d0:	49 01       	movw	r8, r18
 2d2:	5a 01       	movw	r10, r20
 2d4:	9b 01       	movw	r18, r22
 2d6:	ac 01       	movw	r20, r24
 2d8:	a7 ea       	ldi	r26, 0xA7	; 167
 2da:	b1 e4       	ldi	r27, 0x41	; 65
 2dc:	0e 94 15 06 	call	0xc2a	; 0xc2a <__muluhisi3>
 2e0:	6b 01       	movw	r12, r22
 2e2:	7c 01       	movw	r14, r24
 2e4:	ac ee       	ldi	r26, 0xEC	; 236
 2e6:	b4 ef       	ldi	r27, 0xF4	; 244
 2e8:	a5 01       	movw	r20, r10
 2ea:	94 01       	movw	r18, r8
 2ec:	0e 94 23 06 	call	0xc46	; 0xc46 <__mulohisi3>
 2f0:	c6 0e       	add	r12, r22
 2f2:	d7 1e       	adc	r13, r23
 2f4:	e8 1e       	adc	r14, r24
 2f6:	f9 1e       	adc	r15, r25
 2f8:	f7 fe       	sbrs	r15, 7
 2fa:	06 c0       	rjmp	.+12     	; 0x308 <do_rand+0x74>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	c8 1a       	sub	r12, r24
 300:	d1 08       	sbc	r13, r1
 302:	e1 08       	sbc	r14, r1
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	f8 0a       	sbc	r15, r24
 308:	c8 82       	st	Y, r12
 30a:	d9 82       	std	Y+1, r13	; 0x01
 30c:	ea 82       	std	Y+2, r14	; 0x02
 30e:	fb 82       	std	Y+3, r15	; 0x03
 310:	c6 01       	movw	r24, r12
 312:	9f 77       	andi	r25, 0x7F	; 127
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	df 90       	pop	r13
 31e:	cf 90       	pop	r12
 320:	bf 90       	pop	r11
 322:	af 90       	pop	r10
 324:	9f 90       	pop	r9
 326:	8f 90       	pop	r8
 328:	08 95       	ret

0000032a <rand_r>:
 32a:	0e 94 4a 01 	call	0x294	; 0x294 <do_rand>
 32e:	08 95       	ret

00000330 <rand>:
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 4a 01 	call	0x294	; 0x294 <do_rand>
 338:	08 95       	ret

0000033a <srand>:
 33a:	a0 e0       	ldi	r26, 0x00	; 0
 33c:	b0 e0       	ldi	r27, 0x00	; 0
 33e:	80 93 00 01 	sts	0x0100, r24
 342:	90 93 01 01 	sts	0x0101, r25
 346:	a0 93 02 01 	sts	0x0102, r26
 34a:	b0 93 03 01 	sts	0x0103, r27
 34e:	08 95       	ret

00000350 <fdevopen>:
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	ec 01       	movw	r28, r24
 35a:	8b 01       	movw	r16, r22
 35c:	00 97       	sbiw	r24, 0x00	; 0
 35e:	31 f4       	brne	.+12     	; 0x36c <fdevopen+0x1c>
 360:	61 15       	cp	r22, r1
 362:	71 05       	cpc	r23, r1
 364:	19 f4       	brne	.+6      	; 0x36c <fdevopen+0x1c>
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	38 c0       	rjmp	.+112    	; 0x3dc <fdevopen+0x8c>
 36c:	6e e0       	ldi	r22, 0x0E	; 14
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 06 04 	call	0x80c	; 0x80c <calloc>
 378:	fc 01       	movw	r30, r24
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	a1 f3       	breq	.-24     	; 0x366 <fdevopen+0x16>
 37e:	80 e8       	ldi	r24, 0x80	; 128
 380:	83 83       	std	Z+3, r24	; 0x03
 382:	01 15       	cp	r16, r1
 384:	11 05       	cpc	r17, r1
 386:	71 f0       	breq	.+28     	; 0x3a4 <fdevopen+0x54>
 388:	13 87       	std	Z+11, r17	; 0x0b
 38a:	02 87       	std	Z+10, r16	; 0x0a
 38c:	81 e8       	ldi	r24, 0x81	; 129
 38e:	83 83       	std	Z+3, r24	; 0x03
 390:	80 91 ff 01 	lds	r24, 0x01FF
 394:	90 91 00 02 	lds	r25, 0x0200
 398:	89 2b       	or	r24, r25
 39a:	21 f4       	brne	.+8      	; 0x3a4 <fdevopen+0x54>
 39c:	f0 93 00 02 	sts	0x0200, r31
 3a0:	e0 93 ff 01 	sts	0x01FF, r30
 3a4:	20 97       	sbiw	r28, 0x00	; 0
 3a6:	c9 f0       	breq	.+50     	; 0x3da <fdevopen+0x8a>
 3a8:	d1 87       	std	Z+9, r29	; 0x09
 3aa:	c0 87       	std	Z+8, r28	; 0x08
 3ac:	83 81       	ldd	r24, Z+3	; 0x03
 3ae:	82 60       	ori	r24, 0x02	; 2
 3b0:	83 83       	std	Z+3, r24	; 0x03
 3b2:	80 91 01 02 	lds	r24, 0x0201
 3b6:	90 91 02 02 	lds	r25, 0x0202
 3ba:	89 2b       	or	r24, r25
 3bc:	71 f4       	brne	.+28     	; 0x3da <fdevopen+0x8a>
 3be:	f0 93 02 02 	sts	0x0202, r31
 3c2:	e0 93 01 02 	sts	0x0201, r30
 3c6:	80 91 03 02 	lds	r24, 0x0203
 3ca:	90 91 04 02 	lds	r25, 0x0204
 3ce:	89 2b       	or	r24, r25
 3d0:	21 f4       	brne	.+8      	; 0x3da <fdevopen+0x8a>
 3d2:	f0 93 04 02 	sts	0x0204, r31
 3d6:	e0 93 03 02 	sts	0x0203, r30
 3da:	cf 01       	movw	r24, r30
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	08 95       	ret

000003e6 <printf>:
 3e6:	a0 e0       	ldi	r26, 0x00	; 0
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	e9 ef       	ldi	r30, 0xF9	; 249
 3ec:	f1 e0       	ldi	r31, 0x01	; 1
 3ee:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__prologue_saves__+0x20>
 3f2:	fe 01       	movw	r30, r28
 3f4:	35 96       	adiw	r30, 0x05	; 5
 3f6:	61 91       	ld	r22, Z+
 3f8:	71 91       	ld	r23, Z+
 3fa:	af 01       	movw	r20, r30
 3fc:	80 91 01 02 	lds	r24, 0x0201
 400:	90 91 02 02 	lds	r25, 0x0202
 404:	0e 94 34 02 	call	0x468	; 0x468 <vfprintf>
 408:	e2 e0       	ldi	r30, 0x02	; 2
 40a:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__epilogue_restores__+0x20>

0000040e <puts>:
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	e0 91 01 02 	lds	r30, 0x0201
 41a:	f0 91 02 02 	lds	r31, 0x0202
 41e:	23 81       	ldd	r18, Z+3	; 0x03
 420:	21 ff       	sbrs	r18, 1
 422:	1b c0       	rjmp	.+54     	; 0x45a <puts+0x4c>
 424:	ec 01       	movw	r28, r24
 426:	00 e0       	ldi	r16, 0x00	; 0
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	89 91       	ld	r24, Y+
 42c:	60 91 01 02 	lds	r22, 0x0201
 430:	70 91 02 02 	lds	r23, 0x0202
 434:	db 01       	movw	r26, r22
 436:	18 96       	adiw	r26, 0x08	; 8
 438:	ed 91       	ld	r30, X+
 43a:	fc 91       	ld	r31, X
 43c:	19 97       	sbiw	r26, 0x09	; 9
 43e:	88 23       	and	r24, r24
 440:	31 f0       	breq	.+12     	; 0x44e <puts+0x40>
 442:	09 95       	icall
 444:	89 2b       	or	r24, r25
 446:	89 f3       	breq	.-30     	; 0x42a <puts+0x1c>
 448:	0f ef       	ldi	r16, 0xFF	; 255
 44a:	1f ef       	ldi	r17, 0xFF	; 255
 44c:	ee cf       	rjmp	.-36     	; 0x42a <puts+0x1c>
 44e:	8a e0       	ldi	r24, 0x0A	; 10
 450:	09 95       	icall
 452:	89 2b       	or	r24, r25
 454:	11 f4       	brne	.+4      	; 0x45a <puts+0x4c>
 456:	c8 01       	movw	r24, r16
 458:	02 c0       	rjmp	.+4      	; 0x45e <puts+0x50>
 45a:	8f ef       	ldi	r24, 0xFF	; 255
 45c:	9f ef       	ldi	r25, 0xFF	; 255
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	08 95       	ret

00000468 <vfprintf>:
 468:	ac e0       	ldi	r26, 0x0C	; 12
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	ea e3       	ldi	r30, 0x3A	; 58
 46e:	f2 e0       	ldi	r31, 0x02	; 2
 470:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__prologue_saves__>
 474:	7c 01       	movw	r14, r24
 476:	6b 01       	movw	r12, r22
 478:	8a 01       	movw	r16, r20
 47a:	fc 01       	movw	r30, r24
 47c:	17 82       	std	Z+7, r1	; 0x07
 47e:	16 82       	std	Z+6, r1	; 0x06
 480:	83 81       	ldd	r24, Z+3	; 0x03
 482:	81 ff       	sbrs	r24, 1
 484:	bd c1       	rjmp	.+890    	; 0x800 <__stack+0x301>
 486:	ce 01       	movw	r24, r28
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	4c 01       	movw	r8, r24
 48c:	f7 01       	movw	r30, r14
 48e:	93 81       	ldd	r25, Z+3	; 0x03
 490:	f6 01       	movw	r30, r12
 492:	93 fd       	sbrc	r25, 3
 494:	85 91       	lpm	r24, Z+
 496:	93 ff       	sbrs	r25, 3
 498:	81 91       	ld	r24, Z+
 49a:	6f 01       	movw	r12, r30
 49c:	88 23       	and	r24, r24
 49e:	09 f4       	brne	.+2      	; 0x4a2 <vfprintf+0x3a>
 4a0:	ab c1       	rjmp	.+854    	; 0x7f8 <__stack+0x2f9>
 4a2:	85 32       	cpi	r24, 0x25	; 37
 4a4:	39 f4       	brne	.+14     	; 0x4b4 <vfprintf+0x4c>
 4a6:	93 fd       	sbrc	r25, 3
 4a8:	85 91       	lpm	r24, Z+
 4aa:	93 ff       	sbrs	r25, 3
 4ac:	81 91       	ld	r24, Z+
 4ae:	6f 01       	movw	r12, r30
 4b0:	85 32       	cpi	r24, 0x25	; 37
 4b2:	29 f4       	brne	.+10     	; 0x4be <vfprintf+0x56>
 4b4:	b7 01       	movw	r22, r14
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 66 05 	call	0xacc	; 0xacc <fputc>
 4bc:	e7 cf       	rjmp	.-50     	; 0x48c <vfprintf+0x24>
 4be:	51 2c       	mov	r5, r1
 4c0:	31 2c       	mov	r3, r1
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	20 32       	cpi	r18, 0x20	; 32
 4c6:	a0 f4       	brcc	.+40     	; 0x4f0 <vfprintf+0x88>
 4c8:	8b 32       	cpi	r24, 0x2B	; 43
 4ca:	69 f0       	breq	.+26     	; 0x4e6 <vfprintf+0x7e>
 4cc:	30 f4       	brcc	.+12     	; 0x4da <vfprintf+0x72>
 4ce:	80 32       	cpi	r24, 0x20	; 32
 4d0:	59 f0       	breq	.+22     	; 0x4e8 <vfprintf+0x80>
 4d2:	83 32       	cpi	r24, 0x23	; 35
 4d4:	69 f4       	brne	.+26     	; 0x4f0 <vfprintf+0x88>
 4d6:	20 61       	ori	r18, 0x10	; 16
 4d8:	2c c0       	rjmp	.+88     	; 0x532 <__stack+0x33>
 4da:	8d 32       	cpi	r24, 0x2D	; 45
 4dc:	39 f0       	breq	.+14     	; 0x4ec <vfprintf+0x84>
 4de:	80 33       	cpi	r24, 0x30	; 48
 4e0:	39 f4       	brne	.+14     	; 0x4f0 <vfprintf+0x88>
 4e2:	21 60       	ori	r18, 0x01	; 1
 4e4:	26 c0       	rjmp	.+76     	; 0x532 <__stack+0x33>
 4e6:	22 60       	ori	r18, 0x02	; 2
 4e8:	24 60       	ori	r18, 0x04	; 4
 4ea:	23 c0       	rjmp	.+70     	; 0x532 <__stack+0x33>
 4ec:	28 60       	ori	r18, 0x08	; 8
 4ee:	21 c0       	rjmp	.+66     	; 0x532 <__stack+0x33>
 4f0:	27 fd       	sbrc	r18, 7
 4f2:	27 c0       	rjmp	.+78     	; 0x542 <__stack+0x43>
 4f4:	30 ed       	ldi	r19, 0xD0	; 208
 4f6:	38 0f       	add	r19, r24
 4f8:	3a 30       	cpi	r19, 0x0A	; 10
 4fa:	78 f4       	brcc	.+30     	; 0x51a <__stack+0x1b>
 4fc:	26 ff       	sbrs	r18, 6
 4fe:	06 c0       	rjmp	.+12     	; 0x50c <__stack+0xd>
 500:	fa e0       	ldi	r31, 0x0A	; 10
 502:	5f 9e       	mul	r5, r31
 504:	30 0d       	add	r19, r0
 506:	11 24       	eor	r1, r1
 508:	53 2e       	mov	r5, r19
 50a:	13 c0       	rjmp	.+38     	; 0x532 <__stack+0x33>
 50c:	8a e0       	ldi	r24, 0x0A	; 10
 50e:	38 9e       	mul	r3, r24
 510:	30 0d       	add	r19, r0
 512:	11 24       	eor	r1, r1
 514:	33 2e       	mov	r3, r19
 516:	20 62       	ori	r18, 0x20	; 32
 518:	0c c0       	rjmp	.+24     	; 0x532 <__stack+0x33>
 51a:	8e 32       	cpi	r24, 0x2E	; 46
 51c:	21 f4       	brne	.+8      	; 0x526 <__stack+0x27>
 51e:	26 fd       	sbrc	r18, 6
 520:	6b c1       	rjmp	.+726    	; 0x7f8 <__stack+0x2f9>
 522:	20 64       	ori	r18, 0x40	; 64
 524:	06 c0       	rjmp	.+12     	; 0x532 <__stack+0x33>
 526:	8c 36       	cpi	r24, 0x6C	; 108
 528:	11 f4       	brne	.+4      	; 0x52e <__stack+0x2f>
 52a:	20 68       	ori	r18, 0x80	; 128
 52c:	02 c0       	rjmp	.+4      	; 0x532 <__stack+0x33>
 52e:	88 36       	cpi	r24, 0x68	; 104
 530:	41 f4       	brne	.+16     	; 0x542 <__stack+0x43>
 532:	f6 01       	movw	r30, r12
 534:	93 fd       	sbrc	r25, 3
 536:	85 91       	lpm	r24, Z+
 538:	93 ff       	sbrs	r25, 3
 53a:	81 91       	ld	r24, Z+
 53c:	6f 01       	movw	r12, r30
 53e:	81 11       	cpse	r24, r1
 540:	c1 cf       	rjmp	.-126    	; 0x4c4 <vfprintf+0x5c>
 542:	98 2f       	mov	r25, r24
 544:	9f 7d       	andi	r25, 0xDF	; 223
 546:	95 54       	subi	r25, 0x45	; 69
 548:	93 30       	cpi	r25, 0x03	; 3
 54a:	28 f4       	brcc	.+10     	; 0x556 <__stack+0x57>
 54c:	0c 5f       	subi	r16, 0xFC	; 252
 54e:	1f 4f       	sbci	r17, 0xFF	; 255
 550:	ff e3       	ldi	r31, 0x3F	; 63
 552:	f9 83       	std	Y+1, r31	; 0x01
 554:	0d c0       	rjmp	.+26     	; 0x570 <__stack+0x71>
 556:	83 36       	cpi	r24, 0x63	; 99
 558:	31 f0       	breq	.+12     	; 0x566 <__stack+0x67>
 55a:	83 37       	cpi	r24, 0x73	; 115
 55c:	71 f0       	breq	.+28     	; 0x57a <__stack+0x7b>
 55e:	83 35       	cpi	r24, 0x53	; 83
 560:	09 f0       	breq	.+2      	; 0x564 <__stack+0x65>
 562:	5b c0       	rjmp	.+182    	; 0x61a <__stack+0x11b>
 564:	22 c0       	rjmp	.+68     	; 0x5aa <__stack+0xab>
 566:	f8 01       	movw	r30, r16
 568:	80 81       	ld	r24, Z
 56a:	89 83       	std	Y+1, r24	; 0x01
 56c:	0e 5f       	subi	r16, 0xFE	; 254
 56e:	1f 4f       	sbci	r17, 0xFF	; 255
 570:	44 24       	eor	r4, r4
 572:	43 94       	inc	r4
 574:	51 2c       	mov	r5, r1
 576:	54 01       	movw	r10, r8
 578:	15 c0       	rjmp	.+42     	; 0x5a4 <__stack+0xa5>
 57a:	38 01       	movw	r6, r16
 57c:	f2 e0       	ldi	r31, 0x02	; 2
 57e:	6f 0e       	add	r6, r31
 580:	71 1c       	adc	r7, r1
 582:	f8 01       	movw	r30, r16
 584:	a0 80       	ld	r10, Z
 586:	b1 80       	ldd	r11, Z+1	; 0x01
 588:	26 ff       	sbrs	r18, 6
 58a:	03 c0       	rjmp	.+6      	; 0x592 <__stack+0x93>
 58c:	65 2d       	mov	r22, r5
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <__stack+0x97>
 592:	6f ef       	ldi	r22, 0xFF	; 255
 594:	7f ef       	ldi	r23, 0xFF	; 255
 596:	c5 01       	movw	r24, r10
 598:	2c 87       	std	Y+12, r18	; 0x0c
 59a:	0e 94 5b 05 	call	0xab6	; 0xab6 <strnlen>
 59e:	2c 01       	movw	r4, r24
 5a0:	83 01       	movw	r16, r6
 5a2:	2c 85       	ldd	r18, Y+12	; 0x0c
 5a4:	2f 77       	andi	r18, 0x7F	; 127
 5a6:	22 2e       	mov	r2, r18
 5a8:	17 c0       	rjmp	.+46     	; 0x5d8 <__stack+0xd9>
 5aa:	38 01       	movw	r6, r16
 5ac:	f2 e0       	ldi	r31, 0x02	; 2
 5ae:	6f 0e       	add	r6, r31
 5b0:	71 1c       	adc	r7, r1
 5b2:	f8 01       	movw	r30, r16
 5b4:	a0 80       	ld	r10, Z
 5b6:	b1 80       	ldd	r11, Z+1	; 0x01
 5b8:	26 ff       	sbrs	r18, 6
 5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <__stack+0xc3>
 5bc:	65 2d       	mov	r22, r5
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <__stack+0xc7>
 5c2:	6f ef       	ldi	r22, 0xFF	; 255
 5c4:	7f ef       	ldi	r23, 0xFF	; 255
 5c6:	c5 01       	movw	r24, r10
 5c8:	2c 87       	std	Y+12, r18	; 0x0c
 5ca:	0e 94 49 05 	call	0xa92	; 0xa92 <strnlen_P>
 5ce:	2c 01       	movw	r4, r24
 5d0:	2c 85       	ldd	r18, Y+12	; 0x0c
 5d2:	20 68       	ori	r18, 0x80	; 128
 5d4:	22 2e       	mov	r2, r18
 5d6:	83 01       	movw	r16, r6
 5d8:	23 fc       	sbrc	r2, 3
 5da:	1b c0       	rjmp	.+54     	; 0x612 <__stack+0x113>
 5dc:	83 2d       	mov	r24, r3
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	48 16       	cp	r4, r24
 5e2:	59 06       	cpc	r5, r25
 5e4:	b0 f4       	brcc	.+44     	; 0x612 <__stack+0x113>
 5e6:	b7 01       	movw	r22, r14
 5e8:	80 e2       	ldi	r24, 0x20	; 32
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 66 05 	call	0xacc	; 0xacc <fputc>
 5f0:	3a 94       	dec	r3
 5f2:	f4 cf       	rjmp	.-24     	; 0x5dc <__stack+0xdd>
 5f4:	f5 01       	movw	r30, r10
 5f6:	27 fc       	sbrc	r2, 7
 5f8:	85 91       	lpm	r24, Z+
 5fa:	27 fe       	sbrs	r2, 7
 5fc:	81 91       	ld	r24, Z+
 5fe:	5f 01       	movw	r10, r30
 600:	b7 01       	movw	r22, r14
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 66 05 	call	0xacc	; 0xacc <fputc>
 608:	31 10       	cpse	r3, r1
 60a:	3a 94       	dec	r3
 60c:	f1 e0       	ldi	r31, 0x01	; 1
 60e:	4f 1a       	sub	r4, r31
 610:	51 08       	sbc	r5, r1
 612:	41 14       	cp	r4, r1
 614:	51 04       	cpc	r5, r1
 616:	71 f7       	brne	.-36     	; 0x5f4 <__stack+0xf5>
 618:	e5 c0       	rjmp	.+458    	; 0x7e4 <__stack+0x2e5>
 61a:	84 36       	cpi	r24, 0x64	; 100
 61c:	11 f0       	breq	.+4      	; 0x622 <__stack+0x123>
 61e:	89 36       	cpi	r24, 0x69	; 105
 620:	39 f5       	brne	.+78     	; 0x670 <__stack+0x171>
 622:	f8 01       	movw	r30, r16
 624:	27 ff       	sbrs	r18, 7
 626:	07 c0       	rjmp	.+14     	; 0x636 <__stack+0x137>
 628:	60 81       	ld	r22, Z
 62a:	71 81       	ldd	r23, Z+1	; 0x01
 62c:	82 81       	ldd	r24, Z+2	; 0x02
 62e:	93 81       	ldd	r25, Z+3	; 0x03
 630:	0c 5f       	subi	r16, 0xFC	; 252
 632:	1f 4f       	sbci	r17, 0xFF	; 255
 634:	08 c0       	rjmp	.+16     	; 0x646 <__stack+0x147>
 636:	60 81       	ld	r22, Z
 638:	71 81       	ldd	r23, Z+1	; 0x01
 63a:	88 27       	eor	r24, r24
 63c:	77 fd       	sbrc	r23, 7
 63e:	80 95       	com	r24
 640:	98 2f       	mov	r25, r24
 642:	0e 5f       	subi	r16, 0xFE	; 254
 644:	1f 4f       	sbci	r17, 0xFF	; 255
 646:	2f 76       	andi	r18, 0x6F	; 111
 648:	b2 2e       	mov	r11, r18
 64a:	97 ff       	sbrs	r25, 7
 64c:	09 c0       	rjmp	.+18     	; 0x660 <__stack+0x161>
 64e:	90 95       	com	r25
 650:	80 95       	com	r24
 652:	70 95       	com	r23
 654:	61 95       	neg	r22
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	8f 4f       	sbci	r24, 0xFF	; 255
 65a:	9f 4f       	sbci	r25, 0xFF	; 255
 65c:	20 68       	ori	r18, 0x80	; 128
 65e:	b2 2e       	mov	r11, r18
 660:	2a e0       	ldi	r18, 0x0A	; 10
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	a4 01       	movw	r20, r8
 666:	0e 94 98 05 	call	0xb30	; 0xb30 <__ultoa_invert>
 66a:	a8 2e       	mov	r10, r24
 66c:	a8 18       	sub	r10, r8
 66e:	44 c0       	rjmp	.+136    	; 0x6f8 <__stack+0x1f9>
 670:	85 37       	cpi	r24, 0x75	; 117
 672:	29 f4       	brne	.+10     	; 0x67e <__stack+0x17f>
 674:	2f 7e       	andi	r18, 0xEF	; 239
 676:	b2 2e       	mov	r11, r18
 678:	2a e0       	ldi	r18, 0x0A	; 10
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	25 c0       	rjmp	.+74     	; 0x6c8 <__stack+0x1c9>
 67e:	f2 2f       	mov	r31, r18
 680:	f9 7f       	andi	r31, 0xF9	; 249
 682:	bf 2e       	mov	r11, r31
 684:	8f 36       	cpi	r24, 0x6F	; 111
 686:	c1 f0       	breq	.+48     	; 0x6b8 <__stack+0x1b9>
 688:	18 f4       	brcc	.+6      	; 0x690 <__stack+0x191>
 68a:	88 35       	cpi	r24, 0x58	; 88
 68c:	79 f0       	breq	.+30     	; 0x6ac <__stack+0x1ad>
 68e:	b4 c0       	rjmp	.+360    	; 0x7f8 <__stack+0x2f9>
 690:	80 37       	cpi	r24, 0x70	; 112
 692:	19 f0       	breq	.+6      	; 0x69a <__stack+0x19b>
 694:	88 37       	cpi	r24, 0x78	; 120
 696:	21 f0       	breq	.+8      	; 0x6a0 <__stack+0x1a1>
 698:	af c0       	rjmp	.+350    	; 0x7f8 <__stack+0x2f9>
 69a:	2f 2f       	mov	r18, r31
 69c:	20 61       	ori	r18, 0x10	; 16
 69e:	b2 2e       	mov	r11, r18
 6a0:	b4 fe       	sbrs	r11, 4
 6a2:	0d c0       	rjmp	.+26     	; 0x6be <__stack+0x1bf>
 6a4:	8b 2d       	mov	r24, r11
 6a6:	84 60       	ori	r24, 0x04	; 4
 6a8:	b8 2e       	mov	r11, r24
 6aa:	09 c0       	rjmp	.+18     	; 0x6be <__stack+0x1bf>
 6ac:	24 ff       	sbrs	r18, 4
 6ae:	0a c0       	rjmp	.+20     	; 0x6c4 <__stack+0x1c5>
 6b0:	9f 2f       	mov	r25, r31
 6b2:	96 60       	ori	r25, 0x06	; 6
 6b4:	b9 2e       	mov	r11, r25
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <__stack+0x1c5>
 6b8:	28 e0       	ldi	r18, 0x08	; 8
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <__stack+0x1c9>
 6be:	20 e1       	ldi	r18, 0x10	; 16
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <__stack+0x1c9>
 6c4:	20 e1       	ldi	r18, 0x10	; 16
 6c6:	32 e0       	ldi	r19, 0x02	; 2
 6c8:	f8 01       	movw	r30, r16
 6ca:	b7 fe       	sbrs	r11, 7
 6cc:	07 c0       	rjmp	.+14     	; 0x6dc <__stack+0x1dd>
 6ce:	60 81       	ld	r22, Z
 6d0:	71 81       	ldd	r23, Z+1	; 0x01
 6d2:	82 81       	ldd	r24, Z+2	; 0x02
 6d4:	93 81       	ldd	r25, Z+3	; 0x03
 6d6:	0c 5f       	subi	r16, 0xFC	; 252
 6d8:	1f 4f       	sbci	r17, 0xFF	; 255
 6da:	06 c0       	rjmp	.+12     	; 0x6e8 <__stack+0x1e9>
 6dc:	60 81       	ld	r22, Z
 6de:	71 81       	ldd	r23, Z+1	; 0x01
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 5f       	subi	r16, 0xFE	; 254
 6e6:	1f 4f       	sbci	r17, 0xFF	; 255
 6e8:	a4 01       	movw	r20, r8
 6ea:	0e 94 98 05 	call	0xb30	; 0xb30 <__ultoa_invert>
 6ee:	a8 2e       	mov	r10, r24
 6f0:	a8 18       	sub	r10, r8
 6f2:	fb 2d       	mov	r31, r11
 6f4:	ff 77       	andi	r31, 0x7F	; 127
 6f6:	bf 2e       	mov	r11, r31
 6f8:	b6 fe       	sbrs	r11, 6
 6fa:	0b c0       	rjmp	.+22     	; 0x712 <__stack+0x213>
 6fc:	2b 2d       	mov	r18, r11
 6fe:	2e 7f       	andi	r18, 0xFE	; 254
 700:	a5 14       	cp	r10, r5
 702:	50 f4       	brcc	.+20     	; 0x718 <__stack+0x219>
 704:	b4 fe       	sbrs	r11, 4
 706:	0a c0       	rjmp	.+20     	; 0x71c <__stack+0x21d>
 708:	b2 fc       	sbrc	r11, 2
 70a:	08 c0       	rjmp	.+16     	; 0x71c <__stack+0x21d>
 70c:	2b 2d       	mov	r18, r11
 70e:	2e 7e       	andi	r18, 0xEE	; 238
 710:	05 c0       	rjmp	.+10     	; 0x71c <__stack+0x21d>
 712:	7a 2c       	mov	r7, r10
 714:	2b 2d       	mov	r18, r11
 716:	03 c0       	rjmp	.+6      	; 0x71e <__stack+0x21f>
 718:	7a 2c       	mov	r7, r10
 71a:	01 c0       	rjmp	.+2      	; 0x71e <__stack+0x21f>
 71c:	75 2c       	mov	r7, r5
 71e:	24 ff       	sbrs	r18, 4
 720:	0d c0       	rjmp	.+26     	; 0x73c <__stack+0x23d>
 722:	fe 01       	movw	r30, r28
 724:	ea 0d       	add	r30, r10
 726:	f1 1d       	adc	r31, r1
 728:	80 81       	ld	r24, Z
 72a:	80 33       	cpi	r24, 0x30	; 48
 72c:	11 f4       	brne	.+4      	; 0x732 <__stack+0x233>
 72e:	29 7e       	andi	r18, 0xE9	; 233
 730:	09 c0       	rjmp	.+18     	; 0x744 <__stack+0x245>
 732:	22 ff       	sbrs	r18, 2
 734:	06 c0       	rjmp	.+12     	; 0x742 <__stack+0x243>
 736:	73 94       	inc	r7
 738:	73 94       	inc	r7
 73a:	04 c0       	rjmp	.+8      	; 0x744 <__stack+0x245>
 73c:	82 2f       	mov	r24, r18
 73e:	86 78       	andi	r24, 0x86	; 134
 740:	09 f0       	breq	.+2      	; 0x744 <__stack+0x245>
 742:	73 94       	inc	r7
 744:	23 fd       	sbrc	r18, 3
 746:	13 c0       	rjmp	.+38     	; 0x76e <__stack+0x26f>
 748:	20 ff       	sbrs	r18, 0
 74a:	06 c0       	rjmp	.+12     	; 0x758 <__stack+0x259>
 74c:	5a 2c       	mov	r5, r10
 74e:	73 14       	cp	r7, r3
 750:	18 f4       	brcc	.+6      	; 0x758 <__stack+0x259>
 752:	53 0c       	add	r5, r3
 754:	57 18       	sub	r5, r7
 756:	73 2c       	mov	r7, r3
 758:	73 14       	cp	r7, r3
 75a:	68 f4       	brcc	.+26     	; 0x776 <__stack+0x277>
 75c:	b7 01       	movw	r22, r14
 75e:	80 e2       	ldi	r24, 0x20	; 32
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	2c 87       	std	Y+12, r18	; 0x0c
 764:	0e 94 66 05 	call	0xacc	; 0xacc <fputc>
 768:	73 94       	inc	r7
 76a:	2c 85       	ldd	r18, Y+12	; 0x0c
 76c:	f5 cf       	rjmp	.-22     	; 0x758 <__stack+0x259>
 76e:	73 14       	cp	r7, r3
 770:	10 f4       	brcc	.+4      	; 0x776 <__stack+0x277>
 772:	37 18       	sub	r3, r7
 774:	01 c0       	rjmp	.+2      	; 0x778 <__stack+0x279>
 776:	31 2c       	mov	r3, r1
 778:	24 ff       	sbrs	r18, 4
 77a:	12 c0       	rjmp	.+36     	; 0x7a0 <__stack+0x2a1>
 77c:	b7 01       	movw	r22, r14
 77e:	80 e3       	ldi	r24, 0x30	; 48
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	2c 87       	std	Y+12, r18	; 0x0c
 784:	0e 94 66 05 	call	0xacc	; 0xacc <fputc>
 788:	2c 85       	ldd	r18, Y+12	; 0x0c
 78a:	22 ff       	sbrs	r18, 2
 78c:	17 c0       	rjmp	.+46     	; 0x7bc <__stack+0x2bd>
 78e:	21 ff       	sbrs	r18, 1
 790:	03 c0       	rjmp	.+6      	; 0x798 <__stack+0x299>
 792:	88 e5       	ldi	r24, 0x58	; 88
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <__stack+0x29d>
 798:	88 e7       	ldi	r24, 0x78	; 120
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	b7 01       	movw	r22, r14
 79e:	0c c0       	rjmp	.+24     	; 0x7b8 <__stack+0x2b9>
 7a0:	82 2f       	mov	r24, r18
 7a2:	86 78       	andi	r24, 0x86	; 134
 7a4:	59 f0       	breq	.+22     	; 0x7bc <__stack+0x2bd>
 7a6:	21 fd       	sbrc	r18, 1
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <__stack+0x2af>
 7aa:	80 e2       	ldi	r24, 0x20	; 32
 7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <__stack+0x2b1>
 7ae:	8b e2       	ldi	r24, 0x2B	; 43
 7b0:	27 fd       	sbrc	r18, 7
 7b2:	8d e2       	ldi	r24, 0x2D	; 45
 7b4:	b7 01       	movw	r22, r14
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 66 05 	call	0xacc	; 0xacc <fputc>
 7bc:	a5 14       	cp	r10, r5
 7be:	38 f4       	brcc	.+14     	; 0x7ce <__stack+0x2cf>
 7c0:	b7 01       	movw	r22, r14
 7c2:	80 e3       	ldi	r24, 0x30	; 48
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 66 05 	call	0xacc	; 0xacc <fputc>
 7ca:	5a 94       	dec	r5
 7cc:	f7 cf       	rjmp	.-18     	; 0x7bc <__stack+0x2bd>
 7ce:	aa 94       	dec	r10
 7d0:	f4 01       	movw	r30, r8
 7d2:	ea 0d       	add	r30, r10
 7d4:	f1 1d       	adc	r31, r1
 7d6:	80 81       	ld	r24, Z
 7d8:	b7 01       	movw	r22, r14
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0e 94 66 05 	call	0xacc	; 0xacc <fputc>
 7e0:	a1 10       	cpse	r10, r1
 7e2:	f5 cf       	rjmp	.-22     	; 0x7ce <__stack+0x2cf>
 7e4:	33 20       	and	r3, r3
 7e6:	09 f4       	brne	.+2      	; 0x7ea <__stack+0x2eb>
 7e8:	51 ce       	rjmp	.-862    	; 0x48c <vfprintf+0x24>
 7ea:	b7 01       	movw	r22, r14
 7ec:	80 e2       	ldi	r24, 0x20	; 32
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 66 05 	call	0xacc	; 0xacc <fputc>
 7f4:	3a 94       	dec	r3
 7f6:	f6 cf       	rjmp	.-20     	; 0x7e4 <__stack+0x2e5>
 7f8:	f7 01       	movw	r30, r14
 7fa:	86 81       	ldd	r24, Z+6	; 0x06
 7fc:	97 81       	ldd	r25, Z+7	; 0x07
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <__stack+0x305>
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	9f ef       	ldi	r25, 0xFF	; 255
 804:	2c 96       	adiw	r28, 0x0c	; 12
 806:	e2 e1       	ldi	r30, 0x12	; 18
 808:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__epilogue_restores__>

0000080c <calloc>:
 80c:	0f 93       	push	r16
 80e:	1f 93       	push	r17
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	86 9f       	mul	r24, r22
 816:	80 01       	movw	r16, r0
 818:	87 9f       	mul	r24, r23
 81a:	10 0d       	add	r17, r0
 81c:	96 9f       	mul	r25, r22
 81e:	10 0d       	add	r17, r0
 820:	11 24       	eor	r1, r1
 822:	c8 01       	movw	r24, r16
 824:	0e 94 22 04 	call	0x844	; 0x844 <malloc>
 828:	ec 01       	movw	r28, r24
 82a:	00 97       	sbiw	r24, 0x00	; 0
 82c:	29 f0       	breq	.+10     	; 0x838 <calloc+0x2c>
 82e:	a8 01       	movw	r20, r16
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	0e 94 54 05 	call	0xaa8	; 0xaa8 <memset>
 838:	ce 01       	movw	r24, r28
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	1f 91       	pop	r17
 840:	0f 91       	pop	r16
 842:	08 95       	ret

00000844 <malloc>:
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	82 30       	cpi	r24, 0x02	; 2
 84a:	91 05       	cpc	r25, r1
 84c:	10 f4       	brcc	.+4      	; 0x852 <malloc+0xe>
 84e:	82 e0       	ldi	r24, 0x02	; 2
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	e0 91 07 02 	lds	r30, 0x0207
 856:	f0 91 08 02 	lds	r31, 0x0208
 85a:	20 e0       	ldi	r18, 0x00	; 0
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	a0 e0       	ldi	r26, 0x00	; 0
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	30 97       	sbiw	r30, 0x00	; 0
 864:	39 f1       	breq	.+78     	; 0x8b4 <malloc+0x70>
 866:	40 81       	ld	r20, Z
 868:	51 81       	ldd	r21, Z+1	; 0x01
 86a:	48 17       	cp	r20, r24
 86c:	59 07       	cpc	r21, r25
 86e:	b8 f0       	brcs	.+46     	; 0x89e <malloc+0x5a>
 870:	48 17       	cp	r20, r24
 872:	59 07       	cpc	r21, r25
 874:	71 f4       	brne	.+28     	; 0x892 <malloc+0x4e>
 876:	82 81       	ldd	r24, Z+2	; 0x02
 878:	93 81       	ldd	r25, Z+3	; 0x03
 87a:	10 97       	sbiw	r26, 0x00	; 0
 87c:	29 f0       	breq	.+10     	; 0x888 <malloc+0x44>
 87e:	13 96       	adiw	r26, 0x03	; 3
 880:	9c 93       	st	X, r25
 882:	8e 93       	st	-X, r24
 884:	12 97       	sbiw	r26, 0x02	; 2
 886:	2c c0       	rjmp	.+88     	; 0x8e0 <malloc+0x9c>
 888:	90 93 08 02 	sts	0x0208, r25
 88c:	80 93 07 02 	sts	0x0207, r24
 890:	27 c0       	rjmp	.+78     	; 0x8e0 <malloc+0x9c>
 892:	21 15       	cp	r18, r1
 894:	31 05       	cpc	r19, r1
 896:	31 f0       	breq	.+12     	; 0x8a4 <malloc+0x60>
 898:	42 17       	cp	r20, r18
 89a:	53 07       	cpc	r21, r19
 89c:	18 f0       	brcs	.+6      	; 0x8a4 <malloc+0x60>
 89e:	a9 01       	movw	r20, r18
 8a0:	db 01       	movw	r26, r22
 8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <malloc+0x62>
 8a4:	ef 01       	movw	r28, r30
 8a6:	9a 01       	movw	r18, r20
 8a8:	bd 01       	movw	r22, r26
 8aa:	df 01       	movw	r26, r30
 8ac:	02 80       	ldd	r0, Z+2	; 0x02
 8ae:	f3 81       	ldd	r31, Z+3	; 0x03
 8b0:	e0 2d       	mov	r30, r0
 8b2:	d7 cf       	rjmp	.-82     	; 0x862 <malloc+0x1e>
 8b4:	21 15       	cp	r18, r1
 8b6:	31 05       	cpc	r19, r1
 8b8:	f9 f0       	breq	.+62     	; 0x8f8 <malloc+0xb4>
 8ba:	28 1b       	sub	r18, r24
 8bc:	39 0b       	sbc	r19, r25
 8be:	24 30       	cpi	r18, 0x04	; 4
 8c0:	31 05       	cpc	r19, r1
 8c2:	80 f4       	brcc	.+32     	; 0x8e4 <malloc+0xa0>
 8c4:	8a 81       	ldd	r24, Y+2	; 0x02
 8c6:	9b 81       	ldd	r25, Y+3	; 0x03
 8c8:	61 15       	cp	r22, r1
 8ca:	71 05       	cpc	r23, r1
 8cc:	21 f0       	breq	.+8      	; 0x8d6 <malloc+0x92>
 8ce:	fb 01       	movw	r30, r22
 8d0:	93 83       	std	Z+3, r25	; 0x03
 8d2:	82 83       	std	Z+2, r24	; 0x02
 8d4:	04 c0       	rjmp	.+8      	; 0x8de <malloc+0x9a>
 8d6:	90 93 08 02 	sts	0x0208, r25
 8da:	80 93 07 02 	sts	0x0207, r24
 8de:	fe 01       	movw	r30, r28
 8e0:	32 96       	adiw	r30, 0x02	; 2
 8e2:	44 c0       	rjmp	.+136    	; 0x96c <malloc+0x128>
 8e4:	fe 01       	movw	r30, r28
 8e6:	e2 0f       	add	r30, r18
 8e8:	f3 1f       	adc	r31, r19
 8ea:	81 93       	st	Z+, r24
 8ec:	91 93       	st	Z+, r25
 8ee:	22 50       	subi	r18, 0x02	; 2
 8f0:	31 09       	sbc	r19, r1
 8f2:	39 83       	std	Y+1, r19	; 0x01
 8f4:	28 83       	st	Y, r18
 8f6:	3a c0       	rjmp	.+116    	; 0x96c <malloc+0x128>
 8f8:	20 91 05 02 	lds	r18, 0x0205
 8fc:	30 91 06 02 	lds	r19, 0x0206
 900:	23 2b       	or	r18, r19
 902:	41 f4       	brne	.+16     	; 0x914 <malloc+0xd0>
 904:	20 91 06 01 	lds	r18, 0x0106
 908:	30 91 07 01 	lds	r19, 0x0107
 90c:	30 93 06 02 	sts	0x0206, r19
 910:	20 93 05 02 	sts	0x0205, r18
 914:	20 91 04 01 	lds	r18, 0x0104
 918:	30 91 05 01 	lds	r19, 0x0105
 91c:	21 15       	cp	r18, r1
 91e:	31 05       	cpc	r19, r1
 920:	41 f4       	brne	.+16     	; 0x932 <malloc+0xee>
 922:	2d b7       	in	r18, 0x3d	; 61
 924:	3e b7       	in	r19, 0x3e	; 62
 926:	40 91 08 01 	lds	r20, 0x0108
 92a:	50 91 09 01 	lds	r21, 0x0109
 92e:	24 1b       	sub	r18, r20
 930:	35 0b       	sbc	r19, r21
 932:	e0 91 05 02 	lds	r30, 0x0205
 936:	f0 91 06 02 	lds	r31, 0x0206
 93a:	e2 17       	cp	r30, r18
 93c:	f3 07       	cpc	r31, r19
 93e:	a0 f4       	brcc	.+40     	; 0x968 <malloc+0x124>
 940:	2e 1b       	sub	r18, r30
 942:	3f 0b       	sbc	r19, r31
 944:	28 17       	cp	r18, r24
 946:	39 07       	cpc	r19, r25
 948:	78 f0       	brcs	.+30     	; 0x968 <malloc+0x124>
 94a:	ac 01       	movw	r20, r24
 94c:	4e 5f       	subi	r20, 0xFE	; 254
 94e:	5f 4f       	sbci	r21, 0xFF	; 255
 950:	24 17       	cp	r18, r20
 952:	35 07       	cpc	r19, r21
 954:	48 f0       	brcs	.+18     	; 0x968 <malloc+0x124>
 956:	4e 0f       	add	r20, r30
 958:	5f 1f       	adc	r21, r31
 95a:	50 93 06 02 	sts	0x0206, r21
 95e:	40 93 05 02 	sts	0x0205, r20
 962:	81 93       	st	Z+, r24
 964:	91 93       	st	Z+, r25
 966:	02 c0       	rjmp	.+4      	; 0x96c <malloc+0x128>
 968:	e0 e0       	ldi	r30, 0x00	; 0
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	cf 01       	movw	r24, r30
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	08 95       	ret

00000974 <free>:
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	00 97       	sbiw	r24, 0x00	; 0
 97a:	09 f4       	brne	.+2      	; 0x97e <free+0xa>
 97c:	87 c0       	rjmp	.+270    	; 0xa8c <free+0x118>
 97e:	fc 01       	movw	r30, r24
 980:	32 97       	sbiw	r30, 0x02	; 2
 982:	13 82       	std	Z+3, r1	; 0x03
 984:	12 82       	std	Z+2, r1	; 0x02
 986:	c0 91 07 02 	lds	r28, 0x0207
 98a:	d0 91 08 02 	lds	r29, 0x0208
 98e:	20 97       	sbiw	r28, 0x00	; 0
 990:	81 f4       	brne	.+32     	; 0x9b2 <free+0x3e>
 992:	20 81       	ld	r18, Z
 994:	31 81       	ldd	r19, Z+1	; 0x01
 996:	28 0f       	add	r18, r24
 998:	39 1f       	adc	r19, r25
 99a:	80 91 05 02 	lds	r24, 0x0205
 99e:	90 91 06 02 	lds	r25, 0x0206
 9a2:	82 17       	cp	r24, r18
 9a4:	93 07       	cpc	r25, r19
 9a6:	79 f5       	brne	.+94     	; 0xa06 <free+0x92>
 9a8:	f0 93 06 02 	sts	0x0206, r31
 9ac:	e0 93 05 02 	sts	0x0205, r30
 9b0:	6d c0       	rjmp	.+218    	; 0xa8c <free+0x118>
 9b2:	de 01       	movw	r26, r28
 9b4:	20 e0       	ldi	r18, 0x00	; 0
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	ae 17       	cp	r26, r30
 9ba:	bf 07       	cpc	r27, r31
 9bc:	50 f4       	brcc	.+20     	; 0x9d2 <free+0x5e>
 9be:	12 96       	adiw	r26, 0x02	; 2
 9c0:	4d 91       	ld	r20, X+
 9c2:	5c 91       	ld	r21, X
 9c4:	13 97       	sbiw	r26, 0x03	; 3
 9c6:	9d 01       	movw	r18, r26
 9c8:	41 15       	cp	r20, r1
 9ca:	51 05       	cpc	r21, r1
 9cc:	09 f1       	breq	.+66     	; 0xa10 <free+0x9c>
 9ce:	da 01       	movw	r26, r20
 9d0:	f3 cf       	rjmp	.-26     	; 0x9b8 <free+0x44>
 9d2:	b3 83       	std	Z+3, r27	; 0x03
 9d4:	a2 83       	std	Z+2, r26	; 0x02
 9d6:	40 81       	ld	r20, Z
 9d8:	51 81       	ldd	r21, Z+1	; 0x01
 9da:	84 0f       	add	r24, r20
 9dc:	95 1f       	adc	r25, r21
 9de:	8a 17       	cp	r24, r26
 9e0:	9b 07       	cpc	r25, r27
 9e2:	71 f4       	brne	.+28     	; 0xa00 <free+0x8c>
 9e4:	8d 91       	ld	r24, X+
 9e6:	9c 91       	ld	r25, X
 9e8:	11 97       	sbiw	r26, 0x01	; 1
 9ea:	84 0f       	add	r24, r20
 9ec:	95 1f       	adc	r25, r21
 9ee:	02 96       	adiw	r24, 0x02	; 2
 9f0:	91 83       	std	Z+1, r25	; 0x01
 9f2:	80 83       	st	Z, r24
 9f4:	12 96       	adiw	r26, 0x02	; 2
 9f6:	8d 91       	ld	r24, X+
 9f8:	9c 91       	ld	r25, X
 9fa:	13 97       	sbiw	r26, 0x03	; 3
 9fc:	93 83       	std	Z+3, r25	; 0x03
 9fe:	82 83       	std	Z+2, r24	; 0x02
 a00:	21 15       	cp	r18, r1
 a02:	31 05       	cpc	r19, r1
 a04:	29 f4       	brne	.+10     	; 0xa10 <free+0x9c>
 a06:	f0 93 08 02 	sts	0x0208, r31
 a0a:	e0 93 07 02 	sts	0x0207, r30
 a0e:	3e c0       	rjmp	.+124    	; 0xa8c <free+0x118>
 a10:	d9 01       	movw	r26, r18
 a12:	13 96       	adiw	r26, 0x03	; 3
 a14:	fc 93       	st	X, r31
 a16:	ee 93       	st	-X, r30
 a18:	12 97       	sbiw	r26, 0x02	; 2
 a1a:	4d 91       	ld	r20, X+
 a1c:	5d 91       	ld	r21, X+
 a1e:	a4 0f       	add	r26, r20
 a20:	b5 1f       	adc	r27, r21
 a22:	ea 17       	cp	r30, r26
 a24:	fb 07       	cpc	r31, r27
 a26:	79 f4       	brne	.+30     	; 0xa46 <free+0xd2>
 a28:	80 81       	ld	r24, Z
 a2a:	91 81       	ldd	r25, Z+1	; 0x01
 a2c:	84 0f       	add	r24, r20
 a2e:	95 1f       	adc	r25, r21
 a30:	02 96       	adiw	r24, 0x02	; 2
 a32:	d9 01       	movw	r26, r18
 a34:	11 96       	adiw	r26, 0x01	; 1
 a36:	9c 93       	st	X, r25
 a38:	8e 93       	st	-X, r24
 a3a:	82 81       	ldd	r24, Z+2	; 0x02
 a3c:	93 81       	ldd	r25, Z+3	; 0x03
 a3e:	13 96       	adiw	r26, 0x03	; 3
 a40:	9c 93       	st	X, r25
 a42:	8e 93       	st	-X, r24
 a44:	12 97       	sbiw	r26, 0x02	; 2
 a46:	e0 e0       	ldi	r30, 0x00	; 0
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	8a 81       	ldd	r24, Y+2	; 0x02
 a4c:	9b 81       	ldd	r25, Y+3	; 0x03
 a4e:	00 97       	sbiw	r24, 0x00	; 0
 a50:	19 f0       	breq	.+6      	; 0xa58 <free+0xe4>
 a52:	fe 01       	movw	r30, r28
 a54:	ec 01       	movw	r28, r24
 a56:	f9 cf       	rjmp	.-14     	; 0xa4a <free+0xd6>
 a58:	ce 01       	movw	r24, r28
 a5a:	02 96       	adiw	r24, 0x02	; 2
 a5c:	28 81       	ld	r18, Y
 a5e:	39 81       	ldd	r19, Y+1	; 0x01
 a60:	82 0f       	add	r24, r18
 a62:	93 1f       	adc	r25, r19
 a64:	20 91 05 02 	lds	r18, 0x0205
 a68:	30 91 06 02 	lds	r19, 0x0206
 a6c:	28 17       	cp	r18, r24
 a6e:	39 07       	cpc	r19, r25
 a70:	69 f4       	brne	.+26     	; 0xa8c <free+0x118>
 a72:	30 97       	sbiw	r30, 0x00	; 0
 a74:	29 f4       	brne	.+10     	; 0xa80 <free+0x10c>
 a76:	10 92 08 02 	sts	0x0208, r1
 a7a:	10 92 07 02 	sts	0x0207, r1
 a7e:	02 c0       	rjmp	.+4      	; 0xa84 <free+0x110>
 a80:	13 82       	std	Z+3, r1	; 0x03
 a82:	12 82       	std	Z+2, r1	; 0x02
 a84:	d0 93 06 02 	sts	0x0206, r29
 a88:	c0 93 05 02 	sts	0x0205, r28
 a8c:	df 91       	pop	r29
 a8e:	cf 91       	pop	r28
 a90:	08 95       	ret

00000a92 <strnlen_P>:
 a92:	fc 01       	movw	r30, r24
 a94:	05 90       	lpm	r0, Z+
 a96:	61 50       	subi	r22, 0x01	; 1
 a98:	70 40       	sbci	r23, 0x00	; 0
 a9a:	01 10       	cpse	r0, r1
 a9c:	d8 f7       	brcc	.-10     	; 0xa94 <strnlen_P+0x2>
 a9e:	80 95       	com	r24
 aa0:	90 95       	com	r25
 aa2:	8e 0f       	add	r24, r30
 aa4:	9f 1f       	adc	r25, r31
 aa6:	08 95       	ret

00000aa8 <memset>:
 aa8:	dc 01       	movw	r26, r24
 aaa:	01 c0       	rjmp	.+2      	; 0xaae <memset+0x6>
 aac:	6d 93       	st	X+, r22
 aae:	41 50       	subi	r20, 0x01	; 1
 ab0:	50 40       	sbci	r21, 0x00	; 0
 ab2:	e0 f7       	brcc	.-8      	; 0xaac <memset+0x4>
 ab4:	08 95       	ret

00000ab6 <strnlen>:
 ab6:	fc 01       	movw	r30, r24
 ab8:	61 50       	subi	r22, 0x01	; 1
 aba:	70 40       	sbci	r23, 0x00	; 0
 abc:	01 90       	ld	r0, Z+
 abe:	01 10       	cpse	r0, r1
 ac0:	d8 f7       	brcc	.-10     	; 0xab8 <strnlen+0x2>
 ac2:	80 95       	com	r24
 ac4:	90 95       	com	r25
 ac6:	8e 0f       	add	r24, r30
 ac8:	9f 1f       	adc	r25, r31
 aca:	08 95       	ret

00000acc <fputc>:
 acc:	0f 93       	push	r16
 ace:	1f 93       	push	r17
 ad0:	cf 93       	push	r28
 ad2:	df 93       	push	r29
 ad4:	18 2f       	mov	r17, r24
 ad6:	09 2f       	mov	r16, r25
 ad8:	eb 01       	movw	r28, r22
 ada:	8b 81       	ldd	r24, Y+3	; 0x03
 adc:	81 fd       	sbrc	r24, 1
 ade:	03 c0       	rjmp	.+6      	; 0xae6 <fputc+0x1a>
 ae0:	8f ef       	ldi	r24, 0xFF	; 255
 ae2:	9f ef       	ldi	r25, 0xFF	; 255
 ae4:	20 c0       	rjmp	.+64     	; 0xb26 <fputc+0x5a>
 ae6:	82 ff       	sbrs	r24, 2
 ae8:	10 c0       	rjmp	.+32     	; 0xb0a <fputc+0x3e>
 aea:	4e 81       	ldd	r20, Y+6	; 0x06
 aec:	5f 81       	ldd	r21, Y+7	; 0x07
 aee:	2c 81       	ldd	r18, Y+4	; 0x04
 af0:	3d 81       	ldd	r19, Y+5	; 0x05
 af2:	42 17       	cp	r20, r18
 af4:	53 07       	cpc	r21, r19
 af6:	7c f4       	brge	.+30     	; 0xb16 <fputc+0x4a>
 af8:	e8 81       	ld	r30, Y
 afa:	f9 81       	ldd	r31, Y+1	; 0x01
 afc:	9f 01       	movw	r18, r30
 afe:	2f 5f       	subi	r18, 0xFF	; 255
 b00:	3f 4f       	sbci	r19, 0xFF	; 255
 b02:	39 83       	std	Y+1, r19	; 0x01
 b04:	28 83       	st	Y, r18
 b06:	10 83       	st	Z, r17
 b08:	06 c0       	rjmp	.+12     	; 0xb16 <fputc+0x4a>
 b0a:	e8 85       	ldd	r30, Y+8	; 0x08
 b0c:	f9 85       	ldd	r31, Y+9	; 0x09
 b0e:	81 2f       	mov	r24, r17
 b10:	09 95       	icall
 b12:	89 2b       	or	r24, r25
 b14:	29 f7       	brne	.-54     	; 0xae0 <fputc+0x14>
 b16:	2e 81       	ldd	r18, Y+6	; 0x06
 b18:	3f 81       	ldd	r19, Y+7	; 0x07
 b1a:	2f 5f       	subi	r18, 0xFF	; 255
 b1c:	3f 4f       	sbci	r19, 0xFF	; 255
 b1e:	3f 83       	std	Y+7, r19	; 0x07
 b20:	2e 83       	std	Y+6, r18	; 0x06
 b22:	81 2f       	mov	r24, r17
 b24:	90 2f       	mov	r25, r16
 b26:	df 91       	pop	r29
 b28:	cf 91       	pop	r28
 b2a:	1f 91       	pop	r17
 b2c:	0f 91       	pop	r16
 b2e:	08 95       	ret

00000b30 <__ultoa_invert>:
 b30:	fa 01       	movw	r30, r20
 b32:	aa 27       	eor	r26, r26
 b34:	28 30       	cpi	r18, 0x08	; 8
 b36:	51 f1       	breq	.+84     	; 0xb8c <__ultoa_invert+0x5c>
 b38:	20 31       	cpi	r18, 0x10	; 16
 b3a:	81 f1       	breq	.+96     	; 0xb9c <__ultoa_invert+0x6c>
 b3c:	e8 94       	clt
 b3e:	6f 93       	push	r22
 b40:	6e 7f       	andi	r22, 0xFE	; 254
 b42:	6e 5f       	subi	r22, 0xFE	; 254
 b44:	7f 4f       	sbci	r23, 0xFF	; 255
 b46:	8f 4f       	sbci	r24, 0xFF	; 255
 b48:	9f 4f       	sbci	r25, 0xFF	; 255
 b4a:	af 4f       	sbci	r26, 0xFF	; 255
 b4c:	b1 e0       	ldi	r27, 0x01	; 1
 b4e:	3e d0       	rcall	.+124    	; 0xbcc <__ultoa_invert+0x9c>
 b50:	b4 e0       	ldi	r27, 0x04	; 4
 b52:	3c d0       	rcall	.+120    	; 0xbcc <__ultoa_invert+0x9c>
 b54:	67 0f       	add	r22, r23
 b56:	78 1f       	adc	r23, r24
 b58:	89 1f       	adc	r24, r25
 b5a:	9a 1f       	adc	r25, r26
 b5c:	a1 1d       	adc	r26, r1
 b5e:	68 0f       	add	r22, r24
 b60:	79 1f       	adc	r23, r25
 b62:	8a 1f       	adc	r24, r26
 b64:	91 1d       	adc	r25, r1
 b66:	a1 1d       	adc	r26, r1
 b68:	6a 0f       	add	r22, r26
 b6a:	71 1d       	adc	r23, r1
 b6c:	81 1d       	adc	r24, r1
 b6e:	91 1d       	adc	r25, r1
 b70:	a1 1d       	adc	r26, r1
 b72:	20 d0       	rcall	.+64     	; 0xbb4 <__ultoa_invert+0x84>
 b74:	09 f4       	brne	.+2      	; 0xb78 <__ultoa_invert+0x48>
 b76:	68 94       	set
 b78:	3f 91       	pop	r19
 b7a:	2a e0       	ldi	r18, 0x0A	; 10
 b7c:	26 9f       	mul	r18, r22
 b7e:	11 24       	eor	r1, r1
 b80:	30 19       	sub	r19, r0
 b82:	30 5d       	subi	r19, 0xD0	; 208
 b84:	31 93       	st	Z+, r19
 b86:	de f6       	brtc	.-74     	; 0xb3e <__ultoa_invert+0xe>
 b88:	cf 01       	movw	r24, r30
 b8a:	08 95       	ret
 b8c:	46 2f       	mov	r20, r22
 b8e:	47 70       	andi	r20, 0x07	; 7
 b90:	40 5d       	subi	r20, 0xD0	; 208
 b92:	41 93       	st	Z+, r20
 b94:	b3 e0       	ldi	r27, 0x03	; 3
 b96:	0f d0       	rcall	.+30     	; 0xbb6 <__ultoa_invert+0x86>
 b98:	c9 f7       	brne	.-14     	; 0xb8c <__ultoa_invert+0x5c>
 b9a:	f6 cf       	rjmp	.-20     	; 0xb88 <__ultoa_invert+0x58>
 b9c:	46 2f       	mov	r20, r22
 b9e:	4f 70       	andi	r20, 0x0F	; 15
 ba0:	40 5d       	subi	r20, 0xD0	; 208
 ba2:	4a 33       	cpi	r20, 0x3A	; 58
 ba4:	18 f0       	brcs	.+6      	; 0xbac <__ultoa_invert+0x7c>
 ba6:	49 5d       	subi	r20, 0xD9	; 217
 ba8:	31 fd       	sbrc	r19, 1
 baa:	40 52       	subi	r20, 0x20	; 32
 bac:	41 93       	st	Z+, r20
 bae:	02 d0       	rcall	.+4      	; 0xbb4 <__ultoa_invert+0x84>
 bb0:	a9 f7       	brne	.-22     	; 0xb9c <__ultoa_invert+0x6c>
 bb2:	ea cf       	rjmp	.-44     	; 0xb88 <__ultoa_invert+0x58>
 bb4:	b4 e0       	ldi	r27, 0x04	; 4
 bb6:	a6 95       	lsr	r26
 bb8:	97 95       	ror	r25
 bba:	87 95       	ror	r24
 bbc:	77 95       	ror	r23
 bbe:	67 95       	ror	r22
 bc0:	ba 95       	dec	r27
 bc2:	c9 f7       	brne	.-14     	; 0xbb6 <__ultoa_invert+0x86>
 bc4:	00 97       	sbiw	r24, 0x00	; 0
 bc6:	61 05       	cpc	r22, r1
 bc8:	71 05       	cpc	r23, r1
 bca:	08 95       	ret
 bcc:	9b 01       	movw	r18, r22
 bce:	ac 01       	movw	r20, r24
 bd0:	0a 2e       	mov	r0, r26
 bd2:	06 94       	lsr	r0
 bd4:	57 95       	ror	r21
 bd6:	47 95       	ror	r20
 bd8:	37 95       	ror	r19
 bda:	27 95       	ror	r18
 bdc:	ba 95       	dec	r27
 bde:	c9 f7       	brne	.-14     	; 0xbd2 <__ultoa_invert+0xa2>
 be0:	62 0f       	add	r22, r18
 be2:	73 1f       	adc	r23, r19
 be4:	84 1f       	adc	r24, r20
 be6:	95 1f       	adc	r25, r21
 be8:	a0 1d       	adc	r26, r0
 bea:	08 95       	ret

00000bec <__divmodsi4>:
 bec:	05 2e       	mov	r0, r21
 bee:	97 fb       	bst	r25, 7
 bf0:	1e f4       	brtc	.+6      	; 0xbf8 <__divmodsi4+0xc>
 bf2:	00 94       	com	r0
 bf4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__negsi2>
 bf8:	57 fd       	sbrc	r21, 7
 bfa:	07 d0       	rcall	.+14     	; 0xc0a <__divmodsi4_neg2>
 bfc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__udivmodsi4>
 c00:	07 fc       	sbrc	r0, 7
 c02:	03 d0       	rcall	.+6      	; 0xc0a <__divmodsi4_neg2>
 c04:	4e f4       	brtc	.+18     	; 0xc18 <__divmodsi4_exit>
 c06:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__negsi2>

00000c0a <__divmodsi4_neg2>:
 c0a:	50 95       	com	r21
 c0c:	40 95       	com	r20
 c0e:	30 95       	com	r19
 c10:	21 95       	neg	r18
 c12:	3f 4f       	sbci	r19, 0xFF	; 255
 c14:	4f 4f       	sbci	r20, 0xFF	; 255
 c16:	5f 4f       	sbci	r21, 0xFF	; 255

00000c18 <__divmodsi4_exit>:
 c18:	08 95       	ret

00000c1a <__negsi2>:
 c1a:	90 95       	com	r25
 c1c:	80 95       	com	r24
 c1e:	70 95       	com	r23
 c20:	61 95       	neg	r22
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	8f 4f       	sbci	r24, 0xFF	; 255
 c26:	9f 4f       	sbci	r25, 0xFF	; 255
 c28:	08 95       	ret

00000c2a <__muluhisi3>:
 c2a:	0e 94 81 06 	call	0xd02	; 0xd02 <__umulhisi3>
 c2e:	a5 9f       	mul	r26, r21
 c30:	90 0d       	add	r25, r0
 c32:	b4 9f       	mul	r27, r20
 c34:	90 0d       	add	r25, r0
 c36:	a4 9f       	mul	r26, r20
 c38:	80 0d       	add	r24, r0
 c3a:	91 1d       	adc	r25, r1
 c3c:	11 24       	eor	r1, r1
 c3e:	08 95       	ret

00000c40 <__mulshisi3>:
 c40:	b7 ff       	sbrs	r27, 7
 c42:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__muluhisi3>

00000c46 <__mulohisi3>:
 c46:	0e 94 15 06 	call	0xc2a	; 0xc2a <__muluhisi3>
 c4a:	82 1b       	sub	r24, r18
 c4c:	93 0b       	sbc	r25, r19
 c4e:	08 95       	ret

00000c50 <__prologue_saves__>:
 c50:	2f 92       	push	r2
 c52:	3f 92       	push	r3
 c54:	4f 92       	push	r4
 c56:	5f 92       	push	r5
 c58:	6f 92       	push	r6
 c5a:	7f 92       	push	r7
 c5c:	8f 92       	push	r8
 c5e:	9f 92       	push	r9
 c60:	af 92       	push	r10
 c62:	bf 92       	push	r11
 c64:	cf 92       	push	r12
 c66:	df 92       	push	r13
 c68:	ef 92       	push	r14
 c6a:	ff 92       	push	r15
 c6c:	0f 93       	push	r16
 c6e:	1f 93       	push	r17
 c70:	cf 93       	push	r28
 c72:	df 93       	push	r29
 c74:	cd b7       	in	r28, 0x3d	; 61
 c76:	de b7       	in	r29, 0x3e	; 62
 c78:	ca 1b       	sub	r28, r26
 c7a:	db 0b       	sbc	r29, r27
 c7c:	0f b6       	in	r0, 0x3f	; 63
 c7e:	f8 94       	cli
 c80:	de bf       	out	0x3e, r29	; 62
 c82:	0f be       	out	0x3f, r0	; 63
 c84:	cd bf       	out	0x3d, r28	; 61
 c86:	09 94       	ijmp

00000c88 <__epilogue_restores__>:
 c88:	2a 88       	ldd	r2, Y+18	; 0x12
 c8a:	39 88       	ldd	r3, Y+17	; 0x11
 c8c:	48 88       	ldd	r4, Y+16	; 0x10
 c8e:	5f 84       	ldd	r5, Y+15	; 0x0f
 c90:	6e 84       	ldd	r6, Y+14	; 0x0e
 c92:	7d 84       	ldd	r7, Y+13	; 0x0d
 c94:	8c 84       	ldd	r8, Y+12	; 0x0c
 c96:	9b 84       	ldd	r9, Y+11	; 0x0b
 c98:	aa 84       	ldd	r10, Y+10	; 0x0a
 c9a:	b9 84       	ldd	r11, Y+9	; 0x09
 c9c:	c8 84       	ldd	r12, Y+8	; 0x08
 c9e:	df 80       	ldd	r13, Y+7	; 0x07
 ca0:	ee 80       	ldd	r14, Y+6	; 0x06
 ca2:	fd 80       	ldd	r15, Y+5	; 0x05
 ca4:	0c 81       	ldd	r16, Y+4	; 0x04
 ca6:	1b 81       	ldd	r17, Y+3	; 0x03
 ca8:	aa 81       	ldd	r26, Y+2	; 0x02
 caa:	b9 81       	ldd	r27, Y+1	; 0x01
 cac:	ce 0f       	add	r28, r30
 cae:	d1 1d       	adc	r29, r1
 cb0:	0f b6       	in	r0, 0x3f	; 63
 cb2:	f8 94       	cli
 cb4:	de bf       	out	0x3e, r29	; 62
 cb6:	0f be       	out	0x3f, r0	; 63
 cb8:	cd bf       	out	0x3d, r28	; 61
 cba:	ed 01       	movw	r28, r26
 cbc:	08 95       	ret

00000cbe <__udivmodsi4>:
 cbe:	a1 e2       	ldi	r26, 0x21	; 33
 cc0:	1a 2e       	mov	r1, r26
 cc2:	aa 1b       	sub	r26, r26
 cc4:	bb 1b       	sub	r27, r27
 cc6:	fd 01       	movw	r30, r26
 cc8:	0d c0       	rjmp	.+26     	; 0xce4 <__udivmodsi4_ep>

00000cca <__udivmodsi4_loop>:
 cca:	aa 1f       	adc	r26, r26
 ccc:	bb 1f       	adc	r27, r27
 cce:	ee 1f       	adc	r30, r30
 cd0:	ff 1f       	adc	r31, r31
 cd2:	a2 17       	cp	r26, r18
 cd4:	b3 07       	cpc	r27, r19
 cd6:	e4 07       	cpc	r30, r20
 cd8:	f5 07       	cpc	r31, r21
 cda:	20 f0       	brcs	.+8      	; 0xce4 <__udivmodsi4_ep>
 cdc:	a2 1b       	sub	r26, r18
 cde:	b3 0b       	sbc	r27, r19
 ce0:	e4 0b       	sbc	r30, r20
 ce2:	f5 0b       	sbc	r31, r21

00000ce4 <__udivmodsi4_ep>:
 ce4:	66 1f       	adc	r22, r22
 ce6:	77 1f       	adc	r23, r23
 ce8:	88 1f       	adc	r24, r24
 cea:	99 1f       	adc	r25, r25
 cec:	1a 94       	dec	r1
 cee:	69 f7       	brne	.-38     	; 0xcca <__udivmodsi4_loop>
 cf0:	60 95       	com	r22
 cf2:	70 95       	com	r23
 cf4:	80 95       	com	r24
 cf6:	90 95       	com	r25
 cf8:	9b 01       	movw	r18, r22
 cfa:	ac 01       	movw	r20, r24
 cfc:	bd 01       	movw	r22, r26
 cfe:	cf 01       	movw	r24, r30
 d00:	08 95       	ret

00000d02 <__umulhisi3>:
 d02:	a2 9f       	mul	r26, r18
 d04:	b0 01       	movw	r22, r0
 d06:	b3 9f       	mul	r27, r19
 d08:	c0 01       	movw	r24, r0
 d0a:	a3 9f       	mul	r26, r19
 d0c:	70 0d       	add	r23, r0
 d0e:	81 1d       	adc	r24, r1
 d10:	11 24       	eor	r1, r1
 d12:	91 1d       	adc	r25, r1
 d14:	b2 9f       	mul	r27, r18
 d16:	70 0d       	add	r23, r0
 d18:	81 1d       	adc	r24, r1
 d1a:	11 24       	eor	r1, r1
 d1c:	91 1d       	adc	r25, r1
 d1e:	08 95       	ret

00000d20 <_exit>:
 d20:	f8 94       	cli

00000d22 <__stop_program>:
 d22:	ff cf       	rjmp	.-2      	; 0xd22 <__stop_program>
