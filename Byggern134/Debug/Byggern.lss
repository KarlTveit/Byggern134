
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000618  000006ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080012e  0080012e  000006da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001394  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080d  00000000  00000000  00001c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009a7  00000000  00000000  00002433  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a0  00000000  00000000  00002ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bc  00000000  00000000  0000317c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b4b  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  00004283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e1       	ldi	r30, 0x18	; 24
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 32       	cpi	r26, 0x2E	; 46
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ae e2       	ldi	r26, 0x2E	; 46
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ab 33       	cpi	r26, 0x3B	; 59
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 12 01 	call	0x224	; 0x224 <main>
  a6:	0c 94 0a 03 	jmp	0x614	; 0x614 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_3>:
}




ISR(INT2_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
	interrupt_flag = 0;
  b8:	10 92 30 01 	sts	0x0130, r1
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <OLED_init>:
	*ext_oled_data = 0b01100110;
	*ext_oled_data = 0b00111100;
	
	
	OLED_goto_line(5);
	OLED_goto_column(95);
  c6:	e0 e0       	ldi	r30, 0x00	; 0
	*ext_oled_data = 0b11000000;
  c8:	f0 e1       	ldi	r31, 0x10	; 16
	*ext_oled_data = 0b01100000;
  ca:	8e ea       	ldi	r24, 0xAE	; 174
	*ext_oled_data = 0b00110000;
  cc:	80 83       	st	Z, r24
	*ext_oled_data = 0b00011000;
  ce:	81 ea       	ldi	r24, 0xA1	; 161
	*ext_oled_data = 0b00001100;
  d0:	80 83       	st	Z, r24
	*ext_oled_data = 0b00000110;
  d2:	8a ed       	ldi	r24, 0xDA	; 218
	*ext_oled_data = 0b00000011;
  d4:	80 83       	st	Z, r24
	*ext_oled_data = 0b00000001;
  d6:	82 e1       	ldi	r24, 0x12	; 18
  d8:	80 83       	st	Z, r24
	
	
	//Stjernestøv
	for (uint8_t k = 0; k < 1000; k++ ) {
		for(uint8_t j = 3; j <=5 ; j++) {
  da:	88 ec       	ldi	r24, 0xC8	; 200
  dc:	80 83       	st	Z, r24
  de:	88 ea       	ldi	r24, 0xA8	; 168
  e0:	80 83       	st	Z, r24
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	80 83       	st	Z, r24
  e6:	85 ed       	ldi	r24, 0xD5	; 213
  e8:	80 83       	st	Z, r24
			OLED_goto_line(j);
			for(uint8_t i = 0; i< 50; i++) {
				*ext_oled_data = rand() % 255;
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	80 83       	st	Z, r24
  ee:	81 e8       	ldi	r24, 0x81	; 129
	
	
	//Stjernestøv
	for (uint8_t k = 0; k < 1000; k++ ) {
		for(uint8_t j = 3; j <=5 ; j++) {
			OLED_goto_line(j);
  f0:	80 83       	st	Z, r24
  f2:	80 e5       	ldi	r24, 0x50	; 80
  f4:	80 83       	st	Z, r24
  f6:	89 ed       	ldi	r24, 0xD9	; 217
  f8:	80 83       	st	Z, r24
  fa:	81 e2       	ldi	r24, 0x21	; 33
  fc:	80 83       	st	Z, r24
			for(uint8_t i = 0; i< 50; i++) {
				*ext_oled_data = rand() % 255;
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	80 83       	st	Z, r24
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	80 83       	st	Z, r24
 106:	8b ed       	ldi	r24, 0xDB	; 219
 108:	80 83       	st	Z, r24
 10a:	80 e3       	ldi	r24, 0x30	; 48
	
	//Stjernestøv
	for (uint8_t k = 0; k < 1000; k++ ) {
		for(uint8_t j = 3; j <=5 ; j++) {
			OLED_goto_line(j);
			for(uint8_t i = 0; i< 50; i++) {
 10c:	80 83       	st	Z, r24
	*ext_oled_data = 0b00000001;
	
	
	//Stjernestøv
	for (uint8_t k = 0; k < 1000; k++ ) {
		for(uint8_t j = 3; j <=5 ; j++) {
 10e:	8d ea       	ldi	r24, 0xAD	; 173
 110:	80 83       	st	Z, r24
 112:	10 82       	st	Z, r1
 114:	84 ea       	ldi	r24, 0xA4	; 164
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	80 83       	st	Z, r24
 118:	86 ea       	ldi	r24, 0xA6	; 166
 11a:	80 83       	st	Z, r24
 11c:	8f ea       	ldi	r24, 0xAF	; 175
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <OLED_goto_line>:
 122:	90 eb       	ldi	r25, 0xB0	; 176
				*ext_oled_data = rand() % 255;
			}
			
		}
		_delay_ms(200);
	}
 124:	98 0f       	add	r25, r24
	
	
void OLED_goto_line(uint8_t line){			// line = {0,7}
	
	
	*ext_oled_cmd = PAGE0 + line;
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	f0 e1       	ldi	r31, 0x10	; 16
 12a:	90 83       	st	Z, r25
	*ext_oled_cmd = FIRST_UPPER_COL;
 12c:	90 e1       	ldi	r25, 0x10	; 16
 12e:	90 83       	st	Z, r25
	*ext_oled_cmd = FIRST_LOWER_COL;
 130:	10 82       	st	Z, r1
	
	current_line = line;
 132:	80 93 2e 01 	sts	0x012E, r24
 136:	08 95       	ret

00000138 <OLED_clear_display>:
}

//workin fiiiine
void OLED_clear_display(void){
	 
	 uint8_t c = PAGE0;
 138:	80 eb       	ldi	r24, 0xB0	; 176
	for(uint8_t p = 0; p<8;p++) {
 		*ext_oled_cmd = c++;
 13a:	a0 e0       	ldi	r26, 0x00	; 0
 13c:	b0 e1       	ldi	r27, 0x10	; 16
 		*ext_oled_cmd = FIRST_UPPER_COL;
 13e:	20 e1       	ldi	r18, 0x10	; 16
		*ext_oled_cmd = FIRST_LOWER_COL;
	
	

		for (uint8_t i = 0; i<128; i++) {
			*ext_oled_data = CLEAR;
 140:	e0 e0       	ldi	r30, 0x00	; 0
 142:	f2 e1       	ldi	r31, 0x12	; 18
//workin fiiiine
void OLED_clear_display(void){
	 
	 uint8_t c = PAGE0;
	for(uint8_t p = 0; p<8;p++) {
 		*ext_oled_cmd = c++;
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	98 0f       	add	r25, r24
 148:	8c 93       	st	X, r24
 		*ext_oled_cmd = FIRST_UPPER_COL;
 14a:	2c 93       	st	X, r18
		*ext_oled_cmd = FIRST_LOWER_COL;
 14c:	1c 92       	st	X, r1
	
	

		for (uint8_t i = 0; i<128; i++) {
 14e:	80 e0       	ldi	r24, 0x00	; 0
			*ext_oled_data = CLEAR;
 150:	10 82       	st	Z, r1
 		*ext_oled_cmd = FIRST_UPPER_COL;
		*ext_oled_cmd = FIRST_LOWER_COL;
	
	

		for (uint8_t i = 0; i<128; i++) {
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	80 38       	cpi	r24, 0x80	; 128
 156:	e1 f7       	brne	.-8      	; 0x150 <OLED_clear_display+0x18>

//workin fiiiine
void OLED_clear_display(void){
	 
	 uint8_t c = PAGE0;
	for(uint8_t p = 0; p<8;p++) {
 158:	98 3b       	cpi	r25, 0xB8	; 184
 15a:	11 f0       	breq	.+4      	; 0x160 <OLED_clear_display+0x28>
 		*ext_oled_cmd = c++;
 15c:	89 2f       	mov	r24, r25
 15e:	f2 cf       	rjmp	.-28     	; 0x144 <OLED_clear_display+0xc>
			*ext_oled_data = CLEAR;
			/*_delay_ms(10);*/
		}
	}
	
	current_line = 0;
 160:	10 92 2e 01 	sts	0x012E, r1
	
	OLED_goto_line(0);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 91 00 	call	0x122	; 0x122 <OLED_goto_line>
	printf("Done clearing\r\n");
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 ba 02 	call	0x574	; 0x574 <puts>
 172:	08 95       	ret

00000174 <OLED_goto_column>:
}


void OLED_goto_column(uint8_t column){		//column = {0,127}
	
	*ext_oled_cmd = 0x10+((column & 0xf0)>>4);
 174:	98 2f       	mov	r25, r24
 176:	92 95       	swap	r25
 178:	9f 70       	andi	r25, 0x0F	; 15
 17a:	90 5f       	subi	r25, 0xF0	; 240
 17c:	e0 e0       	ldi	r30, 0x00	; 0
 17e:	f0 e1       	ldi	r31, 0x10	; 16
 180:	90 83       	st	Z, r25
	*ext_oled_cmd = column & 0x0f;
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <SPI_init>:
#include "SPI.h"



void SPI_init() {
	SPCR &= ~(1<<DORD);						//MSB of data word transmitted first
 188:	6d 98       	cbi	0x0d, 5	; 13
	SPCR |= (1<<SPE);						//SPI Enable
 18a:	6e 9a       	sbi	0x0d, 6	; 13
	SPCR |= (1<<MSTR);						//Master mode enable
 18c:	6c 9a       	sbi	0x0d, 4	; 13
	
	SPCR |= (1<<SPR0);						//SCK frequency = F_OSC/16 
 18e:	68 9a       	sbi	0x0d, 0	; 13
	SPCR &= ~(1<<SPR1);
 190:	69 98       	cbi	0x0d, 1	; 13
 192:	08 95       	ret

00000194 <SPI_read>:



void SPI_send(uint8_t message) {
	
	SPDR = message;							//Start transmission
 194:	1f b8       	out	0x0f, r1	; 15
	
	SPI_send(0x00);							//Transmisson of dummy byte, to be able to read from slave
	
	//while (!(SPSR & (1<<SPIF))) {};			//Wait until transmission is complete
	
	return SPDR;							//All messages will end with the dummy byte????
 196:	8f b1       	in	r24, 0x0f	; 15
	
}
 198:	08 95       	ret

0000019a <init_SRAM>:
#include <stdlib.h>
#include <avr/io.h>

void init_SRAM(void){
	// enable external reset, s. --- i datablad atmega162
	MCUCR |= (1 << SRE);
 19a:	85 b7       	in	r24, 0x35	; 53
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	85 bf       	out	0x35, r24	; 53
	// mask pins, s. 32 i datablad atmega162
	SFIOR |= (1 << XMM2);
 1a0:	80 b7       	in	r24, 0x30	; 48
 1a2:	80 62       	ori	r24, 0x20	; 32
 1a4:	80 bf       	out	0x30, r24	; 48
 1a6:	08 95       	ret

000001a8 <UART_Init>:
#include "UART.h"

int UART_Init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 1a8:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 1aa:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1ac:	88 e1       	ldi	r24, 0x18	; 24
 1ae:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2 stop bit
	UCSR0A &= ~(_BV(U2X0));
 1b0:	59 98       	cbi	0x0b, 1	; 11
	
	
	cli();
 1b2:	f8 94       	cli

	
	//RX Complete Interrupt Enable
	UCSR0B |= (1 << RXCIE0);
 1b4:	57 9a       	sbi	0x0a, 7	; 10
	
	//Receive Complete Flag Enable
	UCSR0A |= (1 << RXC0);
 1b6:	5f 9a       	sbi	0x0b, 7	; 11
	
	//Global Interrupt Flag Enable
	sei();
 1b8:	78 94       	sei


	return 1;
}
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	08 95       	ret

000001c0 <UART_Transmit>:


int UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1<<UDRE0) )){}
 1c0:	5d 9b       	sbis	0x0b, 5	; 11
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <UART_Transmit>
	
	UDR0 = data;
 1c4:	8c b9       	out	0x0c, r24	; 12
	return 3;
};
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	08 95       	ret

000001cc <UART_Recieve>:


unsigned char UART_Recieve(void) {
	

	while ( !(UCSR0A & (1<<RXC0)));
 1cc:	5f 9b       	sbis	0x0b, 7	; 11
 1ce:	fe cf       	rjmp	.-4      	; 0x1cc <UART_Recieve>
	
	return UDR0;
 1d0:	8c b1       	in	r24, 0x0c	; 12
	
 1d2:	08 95       	ret

000001d4 <__vector_19>:


uint8_t RECEIVED = 0;

ISR(USART0_RXC_vect)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
	RECEIVED = 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 2f 01 	sts	0x012F, r24
	
	unsigned char temp = UDR0;
 1fc:	8c b1       	in	r24, 0x0c	; 12
	UART_Transmit(temp); // for å teste at det funker
 1fe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <UART_Transmit>
}
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <main>:
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	9f e2       	ldi	r25, 0x2F	; 47
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x4>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0xa>
 22e:	00 00       	nop

int main(void)
{
	_delay_ms(10);

	DDRA = 0xFF;
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	8a bb       	out	0x1a, r24	; 26

	UART_Init(UBRR);
 234:	8f e1       	ldi	r24, 0x1F	; 31
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <UART_Init>
	fdevopen(&UART_Transmit, &UART_Recieve);
 23c:	66 ee       	ldi	r22, 0xE6	; 230
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	80 ee       	ldi	r24, 0xE0	; 224
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 6f 02 	call	0x4de	; 0x4de <fdevopen>
	init_SRAM();
 248:	0e 94 cd 00 	call	0x19a	; 0x19a <init_SRAM>
	
	
	OLED_init();
 24c:	0e 94 63 00 	call	0xc6	; 0xc6 <OLED_init>
	OLED_clear_display();
 250:	0e 94 9c 00 	call	0x138	; 0x138 <OLED_clear_display>
	OLED_goto_line(0);
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 91 00 	call	0x122	; 0x122 <OLED_goto_line>
	OLED_goto_column(0);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 ba 00 	call	0x174	; 0x174 <OLED_goto_column>
	
	
	SPI_init();
 260:	0e 94 c4 00 	call	0x188	; 0x188 <SPI_init>
	printf("Etter OLED \n");
 264:	85 e1       	ldi	r24, 0x15	; 21
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 ba 02 	call	0x574	; 0x574 <puts>
 26c:	9f ef       	ldi	r25, 0xFF	; 255
 26e:	2f e7       	ldi	r18, 0x7F	; 127
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	91 50       	subi	r25, 0x01	; 1
 274:	20 40       	sbci	r18, 0x00	; 0
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x4e>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x58>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x5a>
	while(1) {
		_delay_ms(100);
		SPI_read(0b01010101);
 27e:	85 e5       	ldi	r24, 0x55	; 85
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 ca 00 	call	0x194	; 0x194 <SPI_read>
		printf("Her er jeg \n");
 286:	81 e2       	ldi	r24, 0x21	; 33
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 ba 02 	call	0x574	; 0x574 <puts>
 28e:	ee cf       	rjmp	.-36     	; 0x26c <main+0x48>

00000290 <malloc>:
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	91 05       	cpc	r25, r1
 298:	10 f4       	brcc	.+4      	; 0x29e <malloc+0xe>
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	e0 91 33 01 	lds	r30, 0x0133
 2a2:	f0 91 34 01 	lds	r31, 0x0134
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	a0 e0       	ldi	r26, 0x00	; 0
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	30 97       	sbiw	r30, 0x00	; 0
 2b0:	39 f1       	breq	.+78     	; 0x300 <malloc+0x70>
 2b2:	40 81       	ld	r20, Z
 2b4:	51 81       	ldd	r21, Z+1	; 0x01
 2b6:	48 17       	cp	r20, r24
 2b8:	59 07       	cpc	r21, r25
 2ba:	b8 f0       	brcs	.+46     	; 0x2ea <malloc+0x5a>
 2bc:	48 17       	cp	r20, r24
 2be:	59 07       	cpc	r21, r25
 2c0:	71 f4       	brne	.+28     	; 0x2de <malloc+0x4e>
 2c2:	82 81       	ldd	r24, Z+2	; 0x02
 2c4:	93 81       	ldd	r25, Z+3	; 0x03
 2c6:	10 97       	sbiw	r26, 0x00	; 0
 2c8:	29 f0       	breq	.+10     	; 0x2d4 <malloc+0x44>
 2ca:	13 96       	adiw	r26, 0x03	; 3
 2cc:	9c 93       	st	X, r25
 2ce:	8e 93       	st	-X, r24
 2d0:	12 97       	sbiw	r26, 0x02	; 2
 2d2:	2c c0       	rjmp	.+88     	; 0x32c <malloc+0x9c>
 2d4:	90 93 34 01 	sts	0x0134, r25
 2d8:	80 93 33 01 	sts	0x0133, r24
 2dc:	27 c0       	rjmp	.+78     	; 0x32c <malloc+0x9c>
 2de:	21 15       	cp	r18, r1
 2e0:	31 05       	cpc	r19, r1
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <malloc+0x60>
 2e4:	42 17       	cp	r20, r18
 2e6:	53 07       	cpc	r21, r19
 2e8:	18 f0       	brcs	.+6      	; 0x2f0 <malloc+0x60>
 2ea:	a9 01       	movw	r20, r18
 2ec:	db 01       	movw	r26, r22
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <malloc+0x62>
 2f0:	ef 01       	movw	r28, r30
 2f2:	9a 01       	movw	r18, r20
 2f4:	bd 01       	movw	r22, r26
 2f6:	df 01       	movw	r26, r30
 2f8:	02 80       	ldd	r0, Z+2	; 0x02
 2fa:	f3 81       	ldd	r31, Z+3	; 0x03
 2fc:	e0 2d       	mov	r30, r0
 2fe:	d7 cf       	rjmp	.-82     	; 0x2ae <malloc+0x1e>
 300:	21 15       	cp	r18, r1
 302:	31 05       	cpc	r19, r1
 304:	f9 f0       	breq	.+62     	; 0x344 <malloc+0xb4>
 306:	28 1b       	sub	r18, r24
 308:	39 0b       	sbc	r19, r25
 30a:	24 30       	cpi	r18, 0x04	; 4
 30c:	31 05       	cpc	r19, r1
 30e:	80 f4       	brcc	.+32     	; 0x330 <malloc+0xa0>
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	9b 81       	ldd	r25, Y+3	; 0x03
 314:	61 15       	cp	r22, r1
 316:	71 05       	cpc	r23, r1
 318:	21 f0       	breq	.+8      	; 0x322 <malloc+0x92>
 31a:	fb 01       	movw	r30, r22
 31c:	93 83       	std	Z+3, r25	; 0x03
 31e:	82 83       	std	Z+2, r24	; 0x02
 320:	04 c0       	rjmp	.+8      	; 0x32a <malloc+0x9a>
 322:	90 93 34 01 	sts	0x0134, r25
 326:	80 93 33 01 	sts	0x0133, r24
 32a:	fe 01       	movw	r30, r28
 32c:	32 96       	adiw	r30, 0x02	; 2
 32e:	44 c0       	rjmp	.+136    	; 0x3b8 <malloc+0x128>
 330:	fe 01       	movw	r30, r28
 332:	e2 0f       	add	r30, r18
 334:	f3 1f       	adc	r31, r19
 336:	81 93       	st	Z+, r24
 338:	91 93       	st	Z+, r25
 33a:	22 50       	subi	r18, 0x02	; 2
 33c:	31 09       	sbc	r19, r1
 33e:	39 83       	std	Y+1, r19	; 0x01
 340:	28 83       	st	Y, r18
 342:	3a c0       	rjmp	.+116    	; 0x3b8 <malloc+0x128>
 344:	20 91 31 01 	lds	r18, 0x0131
 348:	30 91 32 01 	lds	r19, 0x0132
 34c:	23 2b       	or	r18, r19
 34e:	41 f4       	brne	.+16     	; 0x360 <malloc+0xd0>
 350:	20 91 02 01 	lds	r18, 0x0102
 354:	30 91 03 01 	lds	r19, 0x0103
 358:	30 93 32 01 	sts	0x0132, r19
 35c:	20 93 31 01 	sts	0x0131, r18
 360:	20 91 00 01 	lds	r18, 0x0100
 364:	30 91 01 01 	lds	r19, 0x0101
 368:	21 15       	cp	r18, r1
 36a:	31 05       	cpc	r19, r1
 36c:	41 f4       	brne	.+16     	; 0x37e <malloc+0xee>
 36e:	2d b7       	in	r18, 0x3d	; 61
 370:	3e b7       	in	r19, 0x3e	; 62
 372:	40 91 04 01 	lds	r20, 0x0104
 376:	50 91 05 01 	lds	r21, 0x0105
 37a:	24 1b       	sub	r18, r20
 37c:	35 0b       	sbc	r19, r21
 37e:	e0 91 31 01 	lds	r30, 0x0131
 382:	f0 91 32 01 	lds	r31, 0x0132
 386:	e2 17       	cp	r30, r18
 388:	f3 07       	cpc	r31, r19
 38a:	a0 f4       	brcc	.+40     	; 0x3b4 <malloc+0x124>
 38c:	2e 1b       	sub	r18, r30
 38e:	3f 0b       	sbc	r19, r31
 390:	28 17       	cp	r18, r24
 392:	39 07       	cpc	r19, r25
 394:	78 f0       	brcs	.+30     	; 0x3b4 <malloc+0x124>
 396:	ac 01       	movw	r20, r24
 398:	4e 5f       	subi	r20, 0xFE	; 254
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	24 17       	cp	r18, r20
 39e:	35 07       	cpc	r19, r21
 3a0:	48 f0       	brcs	.+18     	; 0x3b4 <malloc+0x124>
 3a2:	4e 0f       	add	r20, r30
 3a4:	5f 1f       	adc	r21, r31
 3a6:	50 93 32 01 	sts	0x0132, r21
 3aa:	40 93 31 01 	sts	0x0131, r20
 3ae:	81 93       	st	Z+, r24
 3b0:	91 93       	st	Z+, r25
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <malloc+0x128>
 3b4:	e0 e0       	ldi	r30, 0x00	; 0
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	cf 01       	movw	r24, r30
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <free>:
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	09 f4       	brne	.+2      	; 0x3ca <free+0xa>
 3c8:	87 c0       	rjmp	.+270    	; 0x4d8 <free+0x118>
 3ca:	fc 01       	movw	r30, r24
 3cc:	32 97       	sbiw	r30, 0x02	; 2
 3ce:	13 82       	std	Z+3, r1	; 0x03
 3d0:	12 82       	std	Z+2, r1	; 0x02
 3d2:	c0 91 33 01 	lds	r28, 0x0133
 3d6:	d0 91 34 01 	lds	r29, 0x0134
 3da:	20 97       	sbiw	r28, 0x00	; 0
 3dc:	81 f4       	brne	.+32     	; 0x3fe <free+0x3e>
 3de:	20 81       	ld	r18, Z
 3e0:	31 81       	ldd	r19, Z+1	; 0x01
 3e2:	28 0f       	add	r18, r24
 3e4:	39 1f       	adc	r19, r25
 3e6:	80 91 31 01 	lds	r24, 0x0131
 3ea:	90 91 32 01 	lds	r25, 0x0132
 3ee:	82 17       	cp	r24, r18
 3f0:	93 07       	cpc	r25, r19
 3f2:	79 f5       	brne	.+94     	; 0x452 <free+0x92>
 3f4:	f0 93 32 01 	sts	0x0132, r31
 3f8:	e0 93 31 01 	sts	0x0131, r30
 3fc:	6d c0       	rjmp	.+218    	; 0x4d8 <free+0x118>
 3fe:	de 01       	movw	r26, r28
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	ae 17       	cp	r26, r30
 406:	bf 07       	cpc	r27, r31
 408:	50 f4       	brcc	.+20     	; 0x41e <free+0x5e>
 40a:	12 96       	adiw	r26, 0x02	; 2
 40c:	4d 91       	ld	r20, X+
 40e:	5c 91       	ld	r21, X
 410:	13 97       	sbiw	r26, 0x03	; 3
 412:	9d 01       	movw	r18, r26
 414:	41 15       	cp	r20, r1
 416:	51 05       	cpc	r21, r1
 418:	09 f1       	breq	.+66     	; 0x45c <free+0x9c>
 41a:	da 01       	movw	r26, r20
 41c:	f3 cf       	rjmp	.-26     	; 0x404 <free+0x44>
 41e:	b3 83       	std	Z+3, r27	; 0x03
 420:	a2 83       	std	Z+2, r26	; 0x02
 422:	40 81       	ld	r20, Z
 424:	51 81       	ldd	r21, Z+1	; 0x01
 426:	84 0f       	add	r24, r20
 428:	95 1f       	adc	r25, r21
 42a:	8a 17       	cp	r24, r26
 42c:	9b 07       	cpc	r25, r27
 42e:	71 f4       	brne	.+28     	; 0x44c <free+0x8c>
 430:	8d 91       	ld	r24, X+
 432:	9c 91       	ld	r25, X
 434:	11 97       	sbiw	r26, 0x01	; 1
 436:	84 0f       	add	r24, r20
 438:	95 1f       	adc	r25, r21
 43a:	02 96       	adiw	r24, 0x02	; 2
 43c:	91 83       	std	Z+1, r25	; 0x01
 43e:	80 83       	st	Z, r24
 440:	12 96       	adiw	r26, 0x02	; 2
 442:	8d 91       	ld	r24, X+
 444:	9c 91       	ld	r25, X
 446:	13 97       	sbiw	r26, 0x03	; 3
 448:	93 83       	std	Z+3, r25	; 0x03
 44a:	82 83       	std	Z+2, r24	; 0x02
 44c:	21 15       	cp	r18, r1
 44e:	31 05       	cpc	r19, r1
 450:	29 f4       	brne	.+10     	; 0x45c <free+0x9c>
 452:	f0 93 34 01 	sts	0x0134, r31
 456:	e0 93 33 01 	sts	0x0133, r30
 45a:	3e c0       	rjmp	.+124    	; 0x4d8 <free+0x118>
 45c:	d9 01       	movw	r26, r18
 45e:	13 96       	adiw	r26, 0x03	; 3
 460:	fc 93       	st	X, r31
 462:	ee 93       	st	-X, r30
 464:	12 97       	sbiw	r26, 0x02	; 2
 466:	4d 91       	ld	r20, X+
 468:	5d 91       	ld	r21, X+
 46a:	a4 0f       	add	r26, r20
 46c:	b5 1f       	adc	r27, r21
 46e:	ea 17       	cp	r30, r26
 470:	fb 07       	cpc	r31, r27
 472:	79 f4       	brne	.+30     	; 0x492 <free+0xd2>
 474:	80 81       	ld	r24, Z
 476:	91 81       	ldd	r25, Z+1	; 0x01
 478:	84 0f       	add	r24, r20
 47a:	95 1f       	adc	r25, r21
 47c:	02 96       	adiw	r24, 0x02	; 2
 47e:	d9 01       	movw	r26, r18
 480:	11 96       	adiw	r26, 0x01	; 1
 482:	9c 93       	st	X, r25
 484:	8e 93       	st	-X, r24
 486:	82 81       	ldd	r24, Z+2	; 0x02
 488:	93 81       	ldd	r25, Z+3	; 0x03
 48a:	13 96       	adiw	r26, 0x03	; 3
 48c:	9c 93       	st	X, r25
 48e:	8e 93       	st	-X, r24
 490:	12 97       	sbiw	r26, 0x02	; 2
 492:	e0 e0       	ldi	r30, 0x00	; 0
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	8a 81       	ldd	r24, Y+2	; 0x02
 498:	9b 81       	ldd	r25, Y+3	; 0x03
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	19 f0       	breq	.+6      	; 0x4a4 <free+0xe4>
 49e:	fe 01       	movw	r30, r28
 4a0:	ec 01       	movw	r28, r24
 4a2:	f9 cf       	rjmp	.-14     	; 0x496 <free+0xd6>
 4a4:	ce 01       	movw	r24, r28
 4a6:	02 96       	adiw	r24, 0x02	; 2
 4a8:	28 81       	ld	r18, Y
 4aa:	39 81       	ldd	r19, Y+1	; 0x01
 4ac:	82 0f       	add	r24, r18
 4ae:	93 1f       	adc	r25, r19
 4b0:	20 91 31 01 	lds	r18, 0x0131
 4b4:	30 91 32 01 	lds	r19, 0x0132
 4b8:	28 17       	cp	r18, r24
 4ba:	39 07       	cpc	r19, r25
 4bc:	69 f4       	brne	.+26     	; 0x4d8 <free+0x118>
 4be:	30 97       	sbiw	r30, 0x00	; 0
 4c0:	29 f4       	brne	.+10     	; 0x4cc <free+0x10c>
 4c2:	10 92 34 01 	sts	0x0134, r1
 4c6:	10 92 33 01 	sts	0x0133, r1
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <free+0x110>
 4cc:	13 82       	std	Z+3, r1	; 0x03
 4ce:	12 82       	std	Z+2, r1	; 0x02
 4d0:	d0 93 32 01 	sts	0x0132, r29
 4d4:	c0 93 31 01 	sts	0x0131, r28
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <fdevopen>:
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	ec 01       	movw	r28, r24
 4e8:	8b 01       	movw	r16, r22
 4ea:	00 97       	sbiw	r24, 0x00	; 0
 4ec:	31 f4       	brne	.+12     	; 0x4fa <fdevopen+0x1c>
 4ee:	61 15       	cp	r22, r1
 4f0:	71 05       	cpc	r23, r1
 4f2:	19 f4       	brne	.+6      	; 0x4fa <fdevopen+0x1c>
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	38 c0       	rjmp	.+112    	; 0x56a <__stack+0x6b>
 4fa:	6e e0       	ldi	r22, 0x0E	; 14
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 e7 02 	call	0x5ce	; 0x5ce <calloc>
 506:	fc 01       	movw	r30, r24
 508:	00 97       	sbiw	r24, 0x00	; 0
 50a:	a1 f3       	breq	.-24     	; 0x4f4 <fdevopen+0x16>
 50c:	80 e8       	ldi	r24, 0x80	; 128
 50e:	83 83       	std	Z+3, r24	; 0x03
 510:	01 15       	cp	r16, r1
 512:	11 05       	cpc	r17, r1
 514:	71 f0       	breq	.+28     	; 0x532 <__stack+0x33>
 516:	13 87       	std	Z+11, r17	; 0x0b
 518:	02 87       	std	Z+10, r16	; 0x0a
 51a:	81 e8       	ldi	r24, 0x81	; 129
 51c:	83 83       	std	Z+3, r24	; 0x03
 51e:	80 91 35 01 	lds	r24, 0x0135
 522:	90 91 36 01 	lds	r25, 0x0136
 526:	89 2b       	or	r24, r25
 528:	21 f4       	brne	.+8      	; 0x532 <__stack+0x33>
 52a:	f0 93 36 01 	sts	0x0136, r31
 52e:	e0 93 35 01 	sts	0x0135, r30
 532:	20 97       	sbiw	r28, 0x00	; 0
 534:	c9 f0       	breq	.+50     	; 0x568 <__stack+0x69>
 536:	d1 87       	std	Z+9, r29	; 0x09
 538:	c0 87       	std	Z+8, r28	; 0x08
 53a:	83 81       	ldd	r24, Z+3	; 0x03
 53c:	82 60       	ori	r24, 0x02	; 2
 53e:	83 83       	std	Z+3, r24	; 0x03
 540:	80 91 37 01 	lds	r24, 0x0137
 544:	90 91 38 01 	lds	r25, 0x0138
 548:	89 2b       	or	r24, r25
 54a:	71 f4       	brne	.+28     	; 0x568 <__stack+0x69>
 54c:	f0 93 38 01 	sts	0x0138, r31
 550:	e0 93 37 01 	sts	0x0137, r30
 554:	80 91 39 01 	lds	r24, 0x0139
 558:	90 91 3a 01 	lds	r25, 0x013A
 55c:	89 2b       	or	r24, r25
 55e:	21 f4       	brne	.+8      	; 0x568 <__stack+0x69>
 560:	f0 93 3a 01 	sts	0x013A, r31
 564:	e0 93 39 01 	sts	0x0139, r30
 568:	cf 01       	movw	r24, r30
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	08 95       	ret

00000574 <puts>:
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	e0 91 37 01 	lds	r30, 0x0137
 580:	f0 91 38 01 	lds	r31, 0x0138
 584:	23 81       	ldd	r18, Z+3	; 0x03
 586:	21 ff       	sbrs	r18, 1
 588:	1b c0       	rjmp	.+54     	; 0x5c0 <puts+0x4c>
 58a:	ec 01       	movw	r28, r24
 58c:	00 e0       	ldi	r16, 0x00	; 0
 58e:	10 e0       	ldi	r17, 0x00	; 0
 590:	89 91       	ld	r24, Y+
 592:	60 91 37 01 	lds	r22, 0x0137
 596:	70 91 38 01 	lds	r23, 0x0138
 59a:	db 01       	movw	r26, r22
 59c:	18 96       	adiw	r26, 0x08	; 8
 59e:	ed 91       	ld	r30, X+
 5a0:	fc 91       	ld	r31, X
 5a2:	19 97       	sbiw	r26, 0x09	; 9
 5a4:	88 23       	and	r24, r24
 5a6:	31 f0       	breq	.+12     	; 0x5b4 <puts+0x40>
 5a8:	09 95       	icall
 5aa:	89 2b       	or	r24, r25
 5ac:	89 f3       	breq	.-30     	; 0x590 <puts+0x1c>
 5ae:	0f ef       	ldi	r16, 0xFF	; 255
 5b0:	1f ef       	ldi	r17, 0xFF	; 255
 5b2:	ee cf       	rjmp	.-36     	; 0x590 <puts+0x1c>
 5b4:	8a e0       	ldi	r24, 0x0A	; 10
 5b6:	09 95       	icall
 5b8:	89 2b       	or	r24, r25
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <puts+0x4c>
 5bc:	c8 01       	movw	r24, r16
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <puts+0x50>
 5c0:	8f ef       	ldi	r24, 0xFF	; 255
 5c2:	9f ef       	ldi	r25, 0xFF	; 255
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	1f 91       	pop	r17
 5ca:	0f 91       	pop	r16
 5cc:	08 95       	ret

000005ce <calloc>:
 5ce:	0f 93       	push	r16
 5d0:	1f 93       	push	r17
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	86 9f       	mul	r24, r22
 5d8:	80 01       	movw	r16, r0
 5da:	87 9f       	mul	r24, r23
 5dc:	10 0d       	add	r17, r0
 5de:	96 9f       	mul	r25, r22
 5e0:	10 0d       	add	r17, r0
 5e2:	11 24       	eor	r1, r1
 5e4:	c8 01       	movw	r24, r16
 5e6:	0e 94 48 01 	call	0x290	; 0x290 <malloc>
 5ea:	ec 01       	movw	r28, r24
 5ec:	00 97       	sbiw	r24, 0x00	; 0
 5ee:	29 f0       	breq	.+10     	; 0x5fa <calloc+0x2c>
 5f0:	a8 01       	movw	r20, r16
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	0e 94 03 03 	call	0x606	; 0x606 <memset>
 5fa:	ce 01       	movw	r24, r28
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	08 95       	ret

00000606 <memset>:
 606:	dc 01       	movw	r26, r24
 608:	01 c0       	rjmp	.+2      	; 0x60c <memset+0x6>
 60a:	6d 93       	st	X+, r22
 60c:	41 50       	subi	r20, 0x01	; 1
 60e:	50 40       	sbci	r21, 0x00	; 0
 610:	e0 f7       	brcc	.-8      	; 0x60a <memset+0x4>
 612:	08 95       	ret

00000614 <_exit>:
 614:	f8 94       	cli

00000616 <__stop_program>:
 616:	ff cf       	rjmp	.-2      	; 0x616 <__stop_program>
